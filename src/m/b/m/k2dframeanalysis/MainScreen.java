/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package m.b.m.k2dframeanalysis;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;




import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.AXIAL_LOADS;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.AnalysisANDprint_FINITE;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.FEM;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.FRAM_MEMBER;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.JOINT_LOADS;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.JOINT_SUPPORTS;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.MOMENT_LOADS;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.MyjointsData;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.MymembersData;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.SUPPORTS;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.Text_Reader;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.UNIFORM_LOADS;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.axial_loads;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.fram_member;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.j1;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.j1_finite;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.j2;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.j2_finite;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.joint_loads;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.joints_supports;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.moment_load;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.uniform_loads;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.x;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.x_finite;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.y;
import static m.b.m.k2dframeanalysis.MBMK2DFrameAnalysis.y_finite;

/**
 *
 * @author ma739918
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel23 = new javax.swing.JLabel();
        jButton_AddJoints = new javax.swing.JButton();
        jButton_AddMembers = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton_SetTheFramProperties = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField_ModulasfElasticity = new javax.swing.JTextField();
        jTextField_MomentOfInertia = new javax.swing.JTextField();
        jTextField_Area = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox_MemberIndex = new javax.swing.JComboBox<>();
        jButton_EditTheFramProperties = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox_JointIndex = new javax.swing.JComboBox<>();
        jCheckBox_XYZ = new javax.swing.JCheckBox();
        jCheckBox_XY = new javax.swing.JCheckBox();
        jCheckBox_Y = new javax.swing.JCheckBox();
        jButton_EditTheSupports = new javax.swing.JButton();
        jButton_SetTheSupports = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox_MemberIndex_Loads = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField_P_At = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField_P = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField_M = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField_M_At = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField_W = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField_W_At = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextField_W_To = new javax.swing.JTextField();
        jButton_MoveLeft = new javax.swing.JButton();
        jButton_MoveUp = new javax.swing.JButton();
        jButton_MoveRight = new javax.swing.JButton();
        jButton_zoom = new javax.swing.JButton();
        jButton_MoveDown = new javax.swing.JButton();
        jButton_minimize = new javax.swing.JButton();
        jButton_AddLoads = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        jButton_Deflections = new javax.swing.JButton();
        jButton_Reactions = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jTextField_NumberOfElement = new javax.swing.JTextField();
        jButton_deflectedShape = new javax.swing.JButton();
        jButton_ShearDiagram = new javax.swing.JButton();
        jButton_MomentDiagram = new javax.swing.JButton();
        jButton_AnimatedSahpe = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel26 = new javax.swing.JLabel();
        jCheckBox_Free = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        jComboBox_JointIndex_Loads = new javax.swing.JComboBox<>();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jTextField_Jointload_M = new javax.swing.JTextField();
        jTextField_Jointload_X = new javax.swing.JTextField();
        jTextField_Jointload_Y = new javax.swing.JTextField();
        jButton_AddLoads_Joints = new javax.swing.JButton();
        jCheckBox_ShowJointNumber = new javax.swing.JCheckBox();
        jCheckBox_ShowMemberNumber = new javax.swing.JCheckBox();
        jButton_Analysis = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel23.setText("jLabel23");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton_AddJoints.setText("Add Joints");
        jButton_AddJoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddJointsActionPerformed(evt);
            }
        });

        jButton_AddMembers.setText("Add Members");
        jButton_AddMembers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddMembersActionPerformed(evt);
            }
        });

        jPanel1.setBackground(java.awt.Color.lightGray);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 51));
        jLabel1.setText("Import The Fram");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 51));
        jLabel2.setText("Fram Prperties");

        jButton_SetTheFramProperties.setText("Set");
        jButton_SetTheFramProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SetTheFramPropertiesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setText("Modulas Of Elasticity");

        jLabel4.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 255));
        jLabel4.setText("Moment Of Inertia");

        jLabel5.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 255));
        jLabel5.setText("Cross Section Area");

        jTextField_ModulasfElasticity.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField_MomentOfInertia.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField_Area.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Member");

        jComboBox_MemberIndex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_MemberIndex.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_MemberIndexItemStateChanged(evt);
            }
        });

        jButton_EditTheFramProperties.setText("Edit");
        jButton_EditTheFramProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EditTheFramPropertiesActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 51));
        jLabel7.setText("Supports");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Joint");

        jComboBox_JointIndex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_JointIndex.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_JointIndexItemStateChanged(evt);
            }
        });

        jCheckBox_XYZ.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jCheckBox_XYZ.setForeground(java.awt.Color.blue);
        jCheckBox_XYZ.setText("Fixed (XYZ)");
        jCheckBox_XYZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_XYZActionPerformed(evt);
            }
        });

        jCheckBox_XY.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jCheckBox_XY.setForeground(java.awt.Color.blue);
        jCheckBox_XY.setText("Hinge (XY)");
        jCheckBox_XY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_XYActionPerformed(evt);
            }
        });

        jCheckBox_Y.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jCheckBox_Y.setForeground(java.awt.Color.blue);
        jCheckBox_Y.setText("Roller (Y)");
        jCheckBox_Y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_YActionPerformed(evt);
            }
        });

        jButton_EditTheSupports.setText("Edit");
        jButton_EditTheSupports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EditTheSupportsActionPerformed(evt);
            }
        });

        jButton_SetTheSupports.setText("Set");
        jButton_SetTheSupports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SetTheSupportsActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 51));
        jLabel9.setText("Loads");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Member");

        jComboBox_MemberIndex_Loads.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel11.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 102, 51));
        jLabel11.setText("Axial Load");

        jLabel12.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel12.setForeground(java.awt.Color.red);
        jLabel12.setText("P");

        jTextField_P_At.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel13.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel13.setForeground(java.awt.Color.red);
        jLabel13.setText("@");

        jTextField_P.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel14.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 102, 51));
        jLabel14.setText("Moment");

        jLabel15.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel15.setForeground(java.awt.Color.red);
        jLabel15.setText("M");

        jTextField_M.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel16.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel16.setForeground(java.awt.Color.red);
        jLabel16.setText("@");

        jTextField_M_At.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel17.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 102, 51));
        jLabel17.setText("Unifrom Load");

        jLabel18.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel18.setForeground(java.awt.Color.red);
        jLabel18.setText("W");

        jTextField_W.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel19.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel19.setForeground(java.awt.Color.red);
        jLabel19.setText("@");

        jTextField_W_At.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel20.setForeground(java.awt.Color.red);
        jLabel20.setText("To");

        jTextField_W_To.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton_MoveLeft.setBackground(new java.awt.Color(204, 153, 255));
        jButton_MoveLeft.setText("<-");
        jButton_MoveLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MoveLeftActionPerformed(evt);
            }
        });

        jButton_MoveUp.setBackground(new java.awt.Color(204, 153, 255));
        jButton_MoveUp.setText("^");
        jButton_MoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MoveUpActionPerformed(evt);
            }
        });

        jButton_MoveRight.setBackground(new java.awt.Color(204, 153, 255));
        jButton_MoveRight.setText("->");
        jButton_MoveRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MoveRightActionPerformed(evt);
            }
        });

        jButton_zoom.setBackground(new java.awt.Color(204, 153, 255));
        jButton_zoom.setText("+");
        jButton_zoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_zoomActionPerformed(evt);
            }
        });

        jButton_MoveDown.setBackground(new java.awt.Color(204, 153, 255));
        jButton_MoveDown.setText("v");
        jButton_MoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MoveDownActionPerformed(evt);
            }
        });

        jButton_minimize.setBackground(new java.awt.Color(204, 153, 255));
        jButton_minimize.setText("-");
        jButton_minimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_minimizeActionPerformed(evt);
            }
        });

        jButton_AddLoads.setText("Add");
        jButton_AddLoads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddLoadsActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 102, 0));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));

        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 102, 51));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Analysis");
        jLabel21.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jButton_Deflections.setText("Deflecions");
        jButton_Deflections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeflectionsActionPerformed(evt);
            }
        });

        jButton_Reactions.setText("Reactions");
        jButton_Reactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ReactionsActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 102, 51));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("FEM");

        jLabel25.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel25.setForeground(java.awt.Color.blue);
        jLabel25.setText("Number Of Element");

        jTextField_NumberOfElement.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField_NumberOfElement.setText("0");

        jButton_deflectedShape.setBackground(new java.awt.Color(153, 255, 153));
        jButton_deflectedShape.setText("DeflectedShape");
        jButton_deflectedShape.setToolTipText("");
        jButton_deflectedShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_deflectedShapeActionPerformed(evt);
            }
        });

        jButton_ShearDiagram.setBackground(new java.awt.Color(153, 255, 153));
        jButton_ShearDiagram.setText("Shear Diagram");
        jButton_ShearDiagram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShearDiagramActionPerformed(evt);
            }
        });

        jButton_MomentDiagram.setBackground(new java.awt.Color(153, 255, 153));
        jButton_MomentDiagram.setText("Max Deflection");
        jButton_MomentDiagram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MomentDiagramActionPerformed(evt);
            }
        });

        jButton_AnimatedSahpe.setBackground(new java.awt.Color(153, 255, 153));
        jButton_AnimatedSahpe.setText("Animated Shape");
        jButton_AnimatedSahpe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AnimatedSahpeActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 102, 51));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Drawing");

        jCheckBox_Free.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jCheckBox_Free.setForeground(java.awt.Color.blue);
        jCheckBox_Free.setText("Free");
        jCheckBox_Free.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_FreeActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setText("Joint");

        jComboBox_JointIndex_Loads.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel28.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel28.setForeground(java.awt.Color.red);
        jLabel28.setText("X");

        jLabel29.setFont(new java.awt.Font("3ds", 0, 12)); // NOI18N
        jLabel29.setForeground(java.awt.Color.red);
        jLabel29.setText("Y");

        jLabel30.setFont(new java.awt.Font("3ds", 0, 10)); // NOI18N
        jLabel30.setForeground(java.awt.Color.red);
        jLabel30.setText("M");

        jTextField_Jointload_M.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField_Jointload_X.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField_Jointload_Y.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton_AddLoads_Joints.setText("Add");
        jButton_AddLoads_Joints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddLoads_JointsActionPerformed(evt);
            }
        });

        jCheckBox_ShowJointNumber.setForeground(new java.awt.Color(0, 102, 0));
        jCheckBox_ShowJointNumber.setText("Show Joints Number");
        jCheckBox_ShowJointNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_ShowJointNumberActionPerformed(evt);
            }
        });

        jCheckBox_ShowMemberNumber.setForeground(new java.awt.Color(0, 102, 0));
        jCheckBox_ShowMemberNumber.setText("Show Members Number");
        jCheckBox_ShowMemberNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_ShowMemberNumberActionPerformed(evt);
            }
        });

        jButton_Analysis.setText("Run");
        jButton_Analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AnalysisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jComboBox_MemberIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(jTextField_ModulasfElasticity, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_MomentOfInertia, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5)
                        .addGap(15, 15, 15)
                        .addComponent(jTextField_Area, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton_EditTheFramProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton_SetTheFramProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jComboBox_JointIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox_XYZ)
                            .addComponent(jCheckBox_XY, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox_Y, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox_Free)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jButton_EditTheSupports, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jButton_SetTheSupports, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jComboBox_MemberIndex_Loads, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel11))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel12)
                        .addGap(0, 0, 0)
                        .addComponent(jTextField_P, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel13)
                        .addGap(0, 0, 0)
                        .addComponent(jTextField_P_At, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel14))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel15)
                        .addGap(0, 0, 0)
                        .addComponent(jTextField_M, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel16)
                        .addGap(0, 0, 0)
                        .addComponent(jTextField_M_At, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel17))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jComboBox_JointIndex_Loads, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel28)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel29)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel30))
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jButton_AddJoints, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jButton_AddMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton_AddLoads, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(0, 0, 0)
                                .addComponent(jTextField_W, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel19)
                                .addGap(0, 0, 0)
                                .addComponent(jTextField_W_At, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel20)
                                .addGap(3, 3, 3)
                                .addComponent(jTextField_W_To, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton_AddLoads_Joints, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jTextField_Jointload_X, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jTextField_Jointload_Y, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jTextField_Jointload_M, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 346, Short.MAX_VALUE)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(643, 643, 643))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton_Reactions, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton_Deflections, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                            .addComponent(jButton_Analysis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGap(13, 13, 13))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jButton_MoveLeft)
                                        .addGap(5, 5, 5)
                                        .addComponent(jButton_MoveUp)
                                        .addGap(9, 9, 9)
                                        .addComponent(jButton_MoveRight))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jButton_minimize, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(jButton_MoveDown)
                                        .addGap(11, 11, 11)
                                        .addComponent(jButton_zoom, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton_deflectedShape, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel25)
                                                .addGap(10, 10, 10)
                                                .addComponent(jTextField_NumberOfElement, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jButton_AnimatedSahpe, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton_ShearDiagram, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton_MomentDiagram, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCheckBox_ShowJointNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCheckBox_ShowMemberNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addContainerGap())
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addContainerGap()))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_AddJoints, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jButton_AddMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_MemberIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel6)))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel3))
                            .addComponent(jTextField_ModulasfElasticity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField_MomentOfInertia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel5))
                            .addComponent(jTextField_Area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jButton_EditTheFramProperties)
                        .addGap(2, 2, 2)
                        .addComponent(jButton_SetTheFramProperties)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_JointIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox_XYZ)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jCheckBox_XY))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jCheckBox_Y))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jCheckBox_Free)))
                        .addGap(3, 3, 3)
                        .addComponent(jButton_EditTheSupports)
                        .addGap(2, 2, 2)
                        .addComponent(jButton_SetTheSupports)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel9)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel10))
                            .addComponent(jComboBox_MemberIndex_Loads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_P, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_P_At, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_M, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_M_At, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel16))))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel18))
                            .addComponent(jTextField_W, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel19))
                            .addComponent(jTextField_W_At, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel20))
                            .addComponent(jTextField_W_To, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jButton_AddLoads)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel27))
                            .addComponent(jComboBox_JointIndex_Loads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_Jointload_X, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_Jointload_Y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_Jointload_M, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(jButton_AddLoads_Joints)
                        .addGap(7, 7, 7)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addComponent(jLabel22))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Analysis, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_Deflections, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Reactions, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel25))
                            .addComponent(jTextField_NumberOfElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jButton_deflectedShape, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jButton_AnimatedSahpe, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jButton_ShearDiagram, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jButton_MomentDiagram, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel26)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_MoveLeft)
                            .addComponent(jButton_MoveUp)
                            .addComponent(jButton_MoveRight))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_minimize)
                            .addComponent(jButton_MoveDown)
                            .addComponent(jButton_zoom))
                        .addGap(27, 27, 27)
                        .addComponent(jCheckBox_ShowJointNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_ShowMemberNumber)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    This Code is written by Mohammad Bilal Alkhasawneh.
    */
    /******************************************************************************************************************
     ******************************************************************************************************************
     ******************************************************************************************************************
        ***********************************Variables of the Code is Down***********************************************
     ******************************************************************************************************************
     ******************************************************************************************************************
     */
     //All Axial Loads..
    //| Index (Beam) | AxialLoads (Group) |      *Each Beam has it own table to describe his loads
    //|       0      |         L1         |=====> | Index | P   |   a  | That mean beam (1) has two axial loads @ 2.3 and @ 3.3
    //|       1      |         L2         |       |   0   | -50 | 2.3m |  
    //|       2      |         L3         |       |   1   | -20 | 3.3m |      

    //For The Fram without finite element
    public static ArrayList<JointSupport> JOINT_SUPPORTS = new ArrayList<>();
    public static ArrayList<JointLoad> JOINT_LOADS = new ArrayList<>();
    public static ArrayList<FramMember> FRAM_MEMBER = new ArrayList<>();
    public static ArrayList<AxialLoad> AXIAL_LOADS = new ArrayList<>();
    public static ArrayList<UniformLoad> UNIFORM_LOADS = new ArrayList<>();
    public static ArrayList<MomentLoad> MOMENT_LOADS = new ArrayList<>();
    public static ArrayList<Support> SUPPORTS = new ArrayList<>();
    
    //For The Fram finite element
    public static ArrayList<JointSupport> joints_supports = new ArrayList<>();
    public static ArrayList<JointLoad> joint_loads = new ArrayList<>();
    public static ArrayList<FramMember> fram_member = new ArrayList<>();
    public static ArrayList<AxialLoad> axial_loads = new ArrayList<>();
    public static ArrayList<UniformLoad> uniform_loads = new ArrayList<>();
    public static ArrayList<MomentLoad> moment_load = new ArrayList<>();
    
    
    //Members Data As Array List
    /*
     i | joint(1) number | joint(2) number
    --------------------------------------
     0         0                1 <--- This is the example down
     1         1                2
     2         2                3
    
    to retrieve the data --> MymembersData.get(0)[0] = that mean the first joint of  member 0 == 0
                             MymembersData.get(0)[1] = that mean the Second joint of member 0 == 1
    **Also the same with Joints Data but there we will find the coordinayes of the joint instead of joints of member
    */
    
    public static ArrayList<String[]> MyjointsData = new ArrayList<String[]>();
    public static ArrayList<String[]> MymembersData = new ArrayList<String[]>();
    public static int JointNumbers;
    public static int MemberNumbers;
    
    //For the fram without finite element
    public static double[] x = new double[100000]; //x coordinates i.e. x[0] --> x-coordinates for joint (1)
    public static double[] y = new double[100000]; //y coordinates i.e. y[1] --> x-coordinates for joint (2)
    public static int[] j1 = new int[100000];//joint one number i.e. member (1) connect between a,b that mean j1(0) = a
    public static int[] j2 = new int[100000];//joint one number i.e. member (1) connect between a,b that mean j1(0) = b

     //For the fram with finite element
    public static ArrayList<Double> x_finite = new ArrayList<>(); //x coordinates i.e. x.get(0) --> x-coordinates for joint (1)
    public static ArrayList<Double> y_finite = new ArrayList<>(); //y coordinates i.e. y.get(1) --> x-coordinates for joint (2)
    public static ArrayList<Integer> j1_finite = new ArrayList<>();//joint one number i.e. member (1) connect between a,b that mean j1.get(0) = a
    public static ArrayList<Integer> j2_finite = new ArrayList<>();//joint one number i.e. member (1) connect between a,b that mean j1.get(0) = b
    
    
    public static JFileChooser fc = new JFileChooser();
    public static Drawing myDrawing = new Drawing();
    public static int HorizantalMovement = 0;
    public static int VerticalMovement = 0;
   
    //public static Object[][] D = null;
    public DeflectionsFram DeflectionTable = new DeflectionsFram();
    public ReactionsFram ReactionsTable = new ReactionsFram();
    public static double FramDeflectionMatrix[][];
    public static double FramDeflectionMatrix_FEM[][];
    
    
   
    /******************************************************************************************************************
     ******************************************************************************************************************
     ******************************************************************************************************************
     ***********************************Variables of the Code is Above*************************************************
     ******************************************************************************************************************
     ******************************************************************************************************************
     */
    
    private void jButton_AddJointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddJointsActionPerformed
        // TODO add your handling code here:    
        MyjointsData.clear();
        MymembersData.clear();
        clearVector(x);clearVector(y);clearVector(j1);clearVector(j2);
        
        JOINT_SUPPORTS.clear();
        JOINT_LOADS.clear();
        FRAM_MEMBER.clear();
        AXIAL_LOADS.clear();
        UNIFORM_LOADS.clear();
        MOMENT_LOADS.clear();
        
        jComboBox_JointIndex.removeAllItems();
        jComboBox_JointIndex_Loads.removeAllItems();
        jComboBox_MemberIndex.removeAllItems();
        jComboBox_MemberIndex_Loads.removeAllItems();
        
        int returnVal = fc.showOpenDialog(this);
        try {
            // TODO code application logic here
            MyjointsData = Text_Reader(fc.getSelectedFile().toString());
            JointNumbers = MyjointsData.size();
            
            //Retrieve XY Coordinates data and fill out in the arrays..
            for (int i = 0; i <= MyjointsData.size() - 1; i++){
                x[i] = Double.valueOf(MyjointsData.get(i)[0]);
                y[i] = Double.valueOf(MyjointsData.get(i)[1]);
                jComboBox_JointIndex.addItem(String.valueOf(i));
                jComboBox_JointIndex_Loads.addItem(String.valueOf(i));
                //System.out.println(x[i]+" , "+y[i]);
            }
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
       DrawTheJoints();
       if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jButton_AddJointsActionPerformed

    private void jButton_AddMembersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddMembersActionPerformed
        // TODO add your handling code here:
        MymembersData.clear();
        
       
        jComboBox_MemberIndex.removeAllItems();
        jComboBox_MemberIndex_Loads.removeAllItems();
         
         int returnVal = fc.showOpenDialog(this);
          myDrawing.setPanel(jPanel1);
        
         try {
            MymembersData = Text_Reader(fc.getSelectedFile().toString());
            MemberNumbers = MymembersData.size();
            jComboBox_MemberIndex.removeAllItems();
            //Retrieve memebrs joints composed "which are these joints that connect of this beam??"
            for (int i = 0; i <= MymembersData.size() - 1; i++){
                j1[i] = Integer.valueOf(MymembersData.get(i)[0]); 
                j2[i] = Integer.valueOf(MymembersData.get(i)[1]);
                jComboBox_MemberIndex.addItem(String.valueOf(i));
                jComboBox_MemberIndex_Loads.addItem(String.valueOf(i));
            }
            jComboBox_MemberIndex.addItem("All");
            
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
         DrawTheMember();
         if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
         
         
         
         
        //Here Initialize for all data....
        //Initilize the AxialLoads Table, Supports Table and then later will fill out by user....
        for (int i=0 ; i<= MymembersData.size()-1; i++){
            FRAM_MEMBER.add(new FramMember(j1[i],j2[i],x[j1[i]],y[j1[i]],x[j2[i]],y[j2[i]],200,60E6,600)); //Gpa, mm4, mm2
            AXIAL_LOADS.add(new AxialLoad(x[j1[i]],y[j1[i]],x[j2[i]],y[j2[i]]));//Make Axial Loads Table
            UNIFORM_LOADS.add(new UniformLoad(x[j1[i]],y[j1[i]],x[j2[i]],y[j2[i]])); //Make Uniform Loads Table
            MOMENT_LOADS.add(new MomentLoad(x[j1[i]],y[j1[i]],x[j2[i]],y[j2[i]]));//Make Moment Loads Table
            SUPPORTS.add(new Support("ixyz","ixyz"));//Make Supports Table the table default case fixed-fixed
        }
        //Initilize the joints Load [Q] Matrix....
        for (int i=0 ; i<= MyjointsData.size()-1 ; i++){
            JOINT_LOADS.add(new JointLoad(i,0,0,0));
            JOINT_SUPPORTS.add(new JointSupport("ixyz"));
            //Now we have a[Q] Matrix all zero 
        }
       

       
    }//GEN-LAST:event_jButton_AddMembersActionPerformed

    private void jButton_AnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AnalysisActionPerformed
        // TODO add your handling code here:
        try {
            //clearMatrix(D);
            SolveTheFram();
            JOptionPane.showMessageDialog(this, "The Fram is Analyized :).....");  
            jButton_Deflections.setEnabled(true);
            jButton_Reactions.setEnabled(true);
            FEM3(Integer.valueOf(jTextField_NumberOfElement.getText().toString()));
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_jButton_AnalysisActionPerformed

    private void jButton_zoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_zoomActionPerformed
        // TODO add your handling code here:
        myDrawing.IncreaseTheScale(5);
        cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }

    }//GEN-LAST:event_jButton_zoomActionPerformed

    private void jButton_minimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_minimizeActionPerformed
        // TODO add your handling code here:
         myDrawing.DecreaseTheScale(5);
         cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jButton_minimizeActionPerformed

    private void jButton_MoveRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MoveRightActionPerformed
        // TODO add your handling code here:
         myDrawing.MoveRight();
        cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jButton_MoveRightActionPerformed

    private void jButton_MoveLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MoveLeftActionPerformed
        // TODO add your handling code here:
         myDrawing.MoveLeft();
         cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }

    }//GEN-LAST:event_jButton_MoveLeftActionPerformed

    private void jButton_MoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MoveUpActionPerformed
        // TODO add your handling code here:
         myDrawing.MoveUp();
        cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jButton_MoveUpActionPerformed

    private void jButton_MoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MoveDownActionPerformed
        // TODO add your handling code here:
         myDrawing.MoveDown();
         cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jButton_MoveDownActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //MainScreen.setSize(screenSize.width, screenSize.height);
        
        
        jComboBox_MemberIndex.removeAllItems();
        jComboBox_MemberIndex_Loads.removeAllItems();
        jComboBox_JointIndex.removeAllItems();
        jComboBox_JointIndex_Loads.removeAllItems();

        
        jCheckBox_XYZ.setEnabled(false);
        jCheckBox_XY.setEnabled(false);
        jCheckBox_Y.setEnabled(false);
        jCheckBox_Free.setEnabled(false);
        
        jCheckBox_ShowJointNumber.setSelected(false);
        jCheckBox_ShowMemberNumber.setSelected(false);
        
        jButton_Deflections.setEnabled(false);
        jButton_Reactions.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void jComboBox_MemberIndexItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_MemberIndexItemStateChanged
        // TODO add your handling code here:
        try{
            if(jComboBox_MemberIndex.getSelectedIndex() == jComboBox_MemberIndex.getItemCount()-1){
                
                jTextField_ModulasfElasticity.setText("");
                jTextField_MomentOfInertia.setText("");
                jTextField_Area.setText("");
                
                jTextField_ModulasfElasticity.setEnabled(false);
                jTextField_MomentOfInertia.setEnabled(false);
                jTextField_Area.setEnabled(false);

            }else{
                jTextField_ModulasfElasticity.setText(String.valueOf(FRAM_MEMBER.get(jComboBox_MemberIndex.getSelectedIndex()).getE()));
                jTextField_MomentOfInertia.setText(String.valueOf(FRAM_MEMBER.get(jComboBox_MemberIndex.getSelectedIndex()).getI()));
                jTextField_Area.setText(String.valueOf(FRAM_MEMBER.get(jComboBox_MemberIndex.getSelectedIndex()).getA()));
              
                jTextField_ModulasfElasticity.setEnabled(false);
                jTextField_MomentOfInertia.setEnabled(false);
                jTextField_Area.setEnabled(false);
            }
         
         DrawTheMember();
         DrawTheJoints();
        }catch(Exception e){
            
        }
       
      
    }//GEN-LAST:event_jComboBox_MemberIndexItemStateChanged

    private void jButton_EditTheFramPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EditTheFramPropertiesActionPerformed
        // TODO add your handling code here:
         jTextField_ModulasfElasticity.setEnabled(true);
         jTextField_MomentOfInertia.setEnabled(true);
         jTextField_Area.setEnabled(true);
    }//GEN-LAST:event_jButton_EditTheFramPropertiesActionPerformed

    private void jButton_SetTheFramPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SetTheFramPropertiesActionPerformed
        // TODO add your handling code here:
        if(jTextField_ModulasfElasticity.isEnabled() && jTextField_MomentOfInertia.isEnabled() && jTextField_Area.isEnabled()){
              jTextField_ModulasfElasticity.setEnabled(false);
              jTextField_MomentOfInertia.setEnabled(false);
              jTextField_Area.setEnabled(false);
              
               if(jComboBox_MemberIndex.getSelectedIndex() == jComboBox_MemberIndex.getItemCount()-1){
                    for(int i = 0 ; i<= FRAM_MEMBER.size()-1; i++ ){
                       FRAM_MEMBER.get(i).changeModulusOfElacticity(Double.valueOf(jTextField_ModulasfElasticity.getText()));
                       FRAM_MEMBER.get(i).changeMomentOfInertia(Double.valueOf(jTextField_MomentOfInertia.getText()));
                       FRAM_MEMBER.get(i).changeArea(Double.valueOf(jTextField_Area.getText()));
                    }
               }else{
                   FRAM_MEMBER.get(jComboBox_MemberIndex.getSelectedIndex()).changeModulusOfElacticity(Double.valueOf(jTextField_ModulasfElasticity.getText()));
                   FRAM_MEMBER.get(jComboBox_MemberIndex.getSelectedIndex()).changeMomentOfInertia(Double.valueOf(jTextField_MomentOfInertia.getText()));
                   FRAM_MEMBER.get(jComboBox_MemberIndex.getSelectedIndex()).changeArea(Double.valueOf(jTextField_Area.getText()));
              }

             

              JOptionPane.showMessageDialog(this, "The value Successully Changed......");  
        }
       
        
         

    }//GEN-LAST:event_jButton_SetTheFramPropertiesActionPerformed

    private void jButton_EditTheSupportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EditTheSupportsActionPerformed
        // TODO add your handling code here:
        jCheckBox_XYZ.setEnabled(true);
        jCheckBox_XY.setEnabled(true);
        jCheckBox_Y.setEnabled(true);
        jCheckBox_Free.setEnabled(true);
        
    }//GEN-LAST:event_jButton_EditTheSupportsActionPerformed

    private void jComboBox_JointIndexItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_JointIndexItemStateChanged
        // TODO add your handling code here:
        try{
        if(jComboBox_JointIndex.getSelectedIndex()>=0){
            String Support_Type = JOINT_SUPPORTS.get(jComboBox_JointIndex.getSelectedIndex()).getSupportType();
            if(Support_Type == "xyz"){
                jCheckBox_XYZ.setSelected(true);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(false);
            }
            else if(Support_Type == "xy"){
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(true);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(false);

            }else if(Support_Type == "y"){
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(true);
                jCheckBox_Free.setSelected(false);

            }else if(Support_Type == "free"){
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(true);
            }else{
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(false);
            }
        }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_jComboBox_JointIndexItemStateChanged

    private void jButton_SetTheSupportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SetTheSupportsActionPerformed
        // TODO add your handling code here:
        if(jComboBox_JointIndex.getSelectedIndex() >=0){
            String Support_Type;
              if(jCheckBox_XYZ.isSelected()){
            Support_Type = "xyz";
        }else if(jCheckBox_XY.isSelected()){
            Support_Type = "xy";
        }else if(jCheckBox_Y.isSelected()){
            Support_Type = "y";
        }else if(jCheckBox_Free.isSelected()){
             Support_Type = "free";
        }else{
             Support_Type = "ixyz";
        }
        
              
         if(Support_Type == "xyz"){
                jCheckBox_XYZ.setSelected(true);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(false);
            }
            else if(Support_Type == "xy"){
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(true);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(false);

            }else if(Support_Type == "y"){
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(true);
                jCheckBox_Free.setSelected(false);

            }else if(Support_Type == "free"){
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(true);
            }else{
                jCheckBox_XYZ.setSelected(false);
                jCheckBox_XY.setSelected(false);
                jCheckBox_Y.setSelected(false);
                jCheckBox_Free.setSelected(false);
            }      
             
         
         //Change the support type......Important part of the code
        JOINT_SUPPORTS.get(jComboBox_JointIndex.getSelectedIndex()).set_Support(Support_Type);
        //Draw the support 
        cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
         
        
        
        
        jCheckBox_XYZ.setEnabled(false);
        jCheckBox_XY.setEnabled(false);
        jCheckBox_Y.setEnabled(false);
        jCheckBox_Free.setEnabled(false);
        }
        
        
        
    }//GEN-LAST:event_jButton_SetTheSupportsActionPerformed

    private void jButton_AddLoadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddLoadsActionPerformed
        // TODO add your handling code here:
          if(jComboBox_MemberIndex_Loads.getSelectedIndex() >= 0){
              
              if(!jTextField_P.getText().isEmpty() && !jTextField_P_At.getText().isEmpty()){
                  double P = Double.valueOf(jTextField_P.getText());
                  double P_At = Double.valueOf(jTextField_P_At.getText());
                  AXIAL_LOADS.get(jComboBox_MemberIndex_Loads.getSelectedIndex()).AddLoad(P, P_At);
                  jTextField_P.setText("");
                  jTextField_P_At.setText("");
              }
            
              if(!jTextField_M.getText().isEmpty() && !jTextField_M_At.getText().isEmpty()){
                  double M = Double.valueOf(jTextField_M.getText());
                  double M_At = Double.valueOf(jTextField_M_At.getText());
                  MOMENT_LOADS.get(jComboBox_MemberIndex_Loads.getSelectedIndex()).AddMoment(M, M_At);
                  jTextField_M.setText("");
                  jTextField_M_At.setText("");
              }
              
              if(!jTextField_W.getText().isEmpty() && !jTextField_W_At.getText().isEmpty() && !jTextField_W_To.getText().isEmpty()){
                  double W = Double.valueOf(jTextField_W.getText());
                  double W_At = Double.valueOf(jTextField_W_At.getText());
                  double W_To = Double.valueOf(jTextField_W_To.getText());
                  UNIFORM_LOADS.get(jComboBox_MemberIndex_Loads.getSelectedIndex()).AddUniformLoad(W, W_At, W_To-W_At, true);
                  jTextField_W.setText("");
                  jTextField_W_At.setText("");
                  jTextField_W_To.setText("");
              }
           
            cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
            

        }
    }//GEN-LAST:event_jButton_AddLoadsActionPerformed

    private void jButton_AddLoads_JointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddLoads_JointsActionPerformed
        // TODO add your handling code here:
        if(jComboBox_JointIndex_Loads.getSelectedIndex() >= 0){
            if(!jTextField_Jointload_X.getText().isEmpty()){
                JOINT_LOADS.get(jComboBox_JointIndex_Loads.getSelectedIndex()).editForce(1, Double.valueOf(jTextField_Jointload_X.getText()));
                jTextField_Jointload_X.setText("");
            }
            if(!jTextField_Jointload_Y.getText().isEmpty()){
                JOINT_LOADS.get(jComboBox_JointIndex_Loads.getSelectedIndex()).editForce(2, Double.valueOf(jTextField_Jointload_Y.getText()));
                jTextField_Jointload_Y.setText("");

            }
            if(!jTextField_Jointload_M.getText().isEmpty()){
                JOINT_LOADS.get(jComboBox_JointIndex_Loads.getSelectedIndex()).editForce(3, Double.valueOf(jTextField_Jointload_M.getText()));
                jTextField_Jointload_M.setText("");
            }
        }
        cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jButton_AddLoads_JointsActionPerformed

    private void jCheckBox_XYZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_XYZActionPerformed
        // TODO add your handling code here:
        if(jCheckBox_XYZ.isSelected()){
            jCheckBox_XY.setSelected(false);
            jCheckBox_Y.setSelected(false);
            jCheckBox_Free.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBox_XYZActionPerformed

    private void jCheckBox_XYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_XYActionPerformed
        // TODO add your handling code here:
        if(jCheckBox_XY.isSelected()){
            jCheckBox_XYZ.setSelected(false);
            jCheckBox_Y.setSelected(false);
            jCheckBox_Free.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBox_XYActionPerformed

    private void jCheckBox_YActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_YActionPerformed
        // TODO add your handling code here:
        if(jCheckBox_Y.isSelected()){
            jCheckBox_XYZ.setSelected(false);
            jCheckBox_XY.setSelected(false);
            jCheckBox_Free.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBox_YActionPerformed

    private void jCheckBox_FreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_FreeActionPerformed
        // TODO add your handling code here:
        if(jCheckBox_Free.isSelected()){
            jCheckBox_XYZ.setSelected(false);
            jCheckBox_XY.setSelected(false);
            jCheckBox_Y.setSelected(false);
        }
        
    }//GEN-LAST:event_jCheckBox_FreeActionPerformed

    private void jCheckBox_ShowJointNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_ShowJointNumberActionPerformed
        // TODO add your handling code here:
            cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jCheckBox_ShowJointNumberActionPerformed

    private void jCheckBox_ShowMemberNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_ShowMemberNumberActionPerformed
        // TODO add your handling code here:
        cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
        if(jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){    
            DrawJointNumber();
            DrawMemberNumber();
        }else if(jCheckBox_ShowJointNumber.isSelected() && !jCheckBox_ShowMemberNumber.isSelected()){
            DrawJointNumber();       
        }else if(!jCheckBox_ShowJointNumber.isSelected() && jCheckBox_ShowMemberNumber.isSelected()){
            DrawMemberNumber();         
        }
    }//GEN-LAST:event_jCheckBox_ShowMemberNumberActionPerformed

    private void jButton_DeflectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeflectionsActionPerformed
        // TODO add your handling code here:
        new DeflectionsFram(FramDeflectionMatrix).setVisible(true);
   
    }//GEN-LAST:event_jButton_DeflectionsActionPerformed

    private void jButton_deflectedShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_deflectedShapeActionPerformed
        try {
            // TODO add your handling code here:
            if(Integer.valueOf(jTextField_NumberOfElement.getText()) >= 1){
                AnalysisANDprint_FINITE(Integer.valueOf(jTextField_NumberOfElement.getText()));
                DeflectedShape(FramDeflectionMatrix_FEM);
        }
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i=0; i<=x_finite.size()-1;i++){
            System.out.println(x_finite.get(i)+" , "+y_finite.get(i));
        }
        
        System.out.println("sssssssssssssssssssssssssssssssssssssss");
        
        for(int i=0; i<=j1_finite.size()-1;i++){
            System.out.println(j1_finite.get(i)+" , "+j2_finite.get(i));
        }
    }//GEN-LAST:event_jButton_deflectedShapeActionPerformed

    private void jButton_ReactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ReactionsActionPerformed
        // TODO add your handling code here:
        new ReactionsFram(FramDeflectionMatrix,MemberNumbers).setVisible(true);
        //ReactionsTable.setVisible(true);
    }//GEN-LAST:event_jButton_ReactionsActionPerformed

    private void jButton_AnimatedSahpeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AnimatedSahpeActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            if(Integer.valueOf(jTextField_NumberOfElement.getText()) >= 1){
                AnalysisANDprint_FINITE(Integer.valueOf(jTextField_NumberOfElement.getText()));
                AnimatedShape(FramDeflectionMatrix_FEM);
        }
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton_AnimatedSahpeActionPerformed

    private void jButton_ShearDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShearDiagramActionPerformed
        // TODO add your handling code here:
        new ShearDiagram(FramDeflectionMatrix,MemberNumbers).setVisible(true);
       
    }//GEN-LAST:event_jButton_ShearDiagramActionPerformed

    private void jButton_MomentDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MomentDiagramActionPerformed
        // TODO add your handling code here:
         
    }//GEN-LAST:event_jButton_MomentDiagramActionPerformed

//********************************************************MAIN**************************************************************/
    public static void main(String args[]) throws IOException {   
        //TODO......
           
    }
   
  
    
/******************************************************************************************************************
 ******************************************************************************************************************
 ******************************************************************************************************************
    ***********************************Functions and Methods*******************************************************
 ******************************************************************************************************************
 ******************************************************************************************************************
     * @param D
     * @param member_Index
     * @return 
     * @throws java.io.IOException
 */        

    
    public int getMembersNumber(){
        
        return MemberNumbers;
    }
    public void FEM_Solve(int number_of_element){
        
    }

    public static void cleanThePanel(){
       myDrawing.CleanThePanel(jPanel1);
    }
    public static void DrawTheMember(){
        myDrawing.setPanel(jPanel1);
        for (int i = 0; i <= MymembersData.size() - 1; i++){
              myDrawing.DrawLine(x[j1[i]], y[j1[i]], x[j2[i]], y[j2[i]]);
            }
        
       
    }
    public static void DrawTheJoints(){
        myDrawing.setPanel(jPanel1);
        for (int i = 0; i <= MyjointsData.size() - 1; i++){
              myDrawing.DrawPoints(x[i], y[i]);
            }
    }
    public static void DrawTheSupports(){
          myDrawing.setPanel(jPanel1);
          for(int i=0 ; i<= JOINT_SUPPORTS.size()-1 ; i++){
              myDrawing.DrawTheSupport(x[i], y[i], JOINT_SUPPORTS.get(i).getSupportType());
          }
    }
    public static void DrawAxialLoads(){
        myDrawing.setPanel(jPanel1);
         for(int i=0 ; i<= AXIAL_LOADS.size()-1 ; i++){
            for(int j=0 ; j<= AXIAL_LOADS.get(i).getSize()-1 ; j++){
                myDrawing.DrawTheAxialLoads(x[j1[i]],y[j1[i]],x[j2[i]],y[j2[i]], AXIAL_LOADS.get(i).getLocation(j), AXIAL_LOADS.get(i).getLoads(j));
            }
        }
    } 
    public static void DrawUniformLoads(){
          myDrawing.setPanel(jPanel1);
         for(int i=0 ; i<= UNIFORM_LOADS.size()-1 ; i++){
            for(int j=0 ; j<= UNIFORM_LOADS.get(i).getSize()-1 ; j++){
                myDrawing.DrawTheUniformLoads(x[j1[i]],y[j1[i]],x[j2[i]],y[j2[i]], UNIFORM_LOADS.get(i).getStartLocation(j),UNIFORM_LOADS.get(i).getStartLocation(j)+UNIFORM_LOADS.get(i).getUniformLoadLength(j),UNIFORM_LOADS.get(i).getUniformLoadValue(j));
            }
        }
    }
    public static void DrawMomentLoads(){
        myDrawing.setPanel(jPanel1);
         for(int i=0 ; i<= MOMENT_LOADS.size()-1 ; i++){
            for(int j=0 ; j<= MOMENT_LOADS.get(i).getSize()-1 ; j++){
                myDrawing.DrawTheMomentLoads(x[j1[i]],y[j1[i]],x[j2[i]],y[j2[i]], MOMENT_LOADS.get(i).getLocation(j), MOMENT_LOADS.get(i).getMoments(j));
            }
        }
    }
    public static void DrawJointsLoad(){
        myDrawing.setPanel(jPanel1);
         for(int i=0 ; i<= JOINT_LOADS.size()-1 ; i++){
                myDrawing.DrawTheJointLoads(x[JOINT_LOADS.get(i).get_JointNumber()],y[JOINT_LOADS.get(i).get_JointNumber()],1,JOINT_LOADS.get(i).get_Xload());
                myDrawing.DrawTheJointLoads(x[JOINT_LOADS.get(i).get_JointNumber()],y[JOINT_LOADS.get(i).get_JointNumber()],2,JOINT_LOADS.get(i).get_Yload());
                myDrawing.DrawTheJointLoads(x[JOINT_LOADS.get(i).get_JointNumber()],y[JOINT_LOADS.get(i).get_JointNumber()],3,JOINT_LOADS.get(i).get_Mload());

         }
    }
    public static void DrawJointNumber(){
         myDrawing.setPanel(jPanel1);
         for(int i=0 ; i<= JointNumbers-1 ; i++){
                myDrawing.DrawJointsNumber(x[i], y[i], i);
         }
    }
    public static void DrawMemberNumber(){
         myDrawing.setPanel(jPanel1);
         for(int i=0 ; i<= MemberNumbers-1 ; i++){
                myDrawing.DrawMemberNumber(x[j1[i]], y[j1[i]], x[j2[i]], y[j2[i]], i);
         }
    }

    
    public static void Run(){
          //JOptionPane.showMessageDialog(this, "Analysis......");    
      
        
        //--1-- Set Support Type
        JOINT_SUPPORTS.get(0).set_Support("xyz");
        JOINT_SUPPORTS.get(1).set_Support("xyz");
      
        
        //--2--Set The Loads
        AXIAL_LOADS.get(0).AddLoad(-75, 2.5);
        AXIAL_LOADS.get(0).AddLoad(20, 4.3);
        
       

        //try {
            //--3--Set the Joints Load
            //JOINT_LOADS.get(5).addForce(2, -10);
            
            //--4--Edit the properties
            
            //AnalysisANDprint();
            
            //--5--Finite Element...
            //FEM(200);
        //} catch (IOException ex) {
            //Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
       // }
        
        try {
            AnalysisANDprint_FINITE(200);
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void SolveTheFram() throws IOException{
       
        //Boundary Condition
        ArrayList<Integer> BC = new ArrayList<>();
        BC = BoundryConition();
          
        //Build The Matrix....
        double[][] Q  = reduceMatrix(Q(),BC,"raw");
        double[][] K  = reduceMatrix(K(),BC,"both");
        double[][] D  = reduceMatrix(D(),BC,"raw");
        double[][] QF = reduceMatrix(QF(),BC,"raw");

        
        //--1--Solve For Defliction
        double[][] defliction =MultiplayMatrix(MatrixInverse(K),Matrix1MinusMatrix2(Q,QF)) ;
      
        
       //--2--Combine the deflictions and get a full matrix of defliction wihout unkowns 
       double[][] D_Solved = D_Solved(defliction); //Get the full Matrix of defliction without unkowns
       D = D_Solved;
       FramDeflectionMatrix = D_Solved;
       PrintMatrix(D_Solved,"0.0000000");
       
       //get_q(D,0);
       //double[][] q = Matrix1PlusMatrix2(MultiplayMatrix(k_local(0),d(D,0)),qf(0));
       //PrintMatrix(q,"0.0000");
    }
   
    
    public static ArrayList<String[]> Text_Reader(String text_file_name) throws FileNotFoundException, IOException{
        int NumberOfPoints = 0;
        ArrayList<String[]> data = new ArrayList<String[]>();
        String[] XY = new String[2];
         try (BufferedReader br = new BufferedReader(new FileReader(text_file_name))) {
         String line;
         while ((line = br.readLine()) != null) {
           List<String> joints = Arrays.asList(line.split(","));
           //System.out.println("joint1: "+ joints.get(0)+"  joint2:"+joints.get(1));
           XY[0] = joints.get(0);
           XY[1] = joints.get(1);
           
           data.add(new String[]{XY[0],XY[1]});
           NumberOfPoints +=1;
        }

      }
       //System.out.println("# Of Joints = "+String.valueOf(NumberOfPoints));
       return data;
       
       //Note that this code return the data as arraylist x,y
       //                                                 x2,y2
       //                                                 x3,y3
       //each raw has Double[] XY = new Double[2] insid an ArrayList...
    }
    public static double[][] MultiplayMatrix(double[][] M1, double[][] M2){
        int ar1_raw,ar1_col,ar2_raw,ar2_col,x,count,start;
        double[] sum = new double[100000];
        ar1_raw = M1.length; ar1_col = M1[0].length;
        ar2_raw = M2.length; ar2_col = M2[0].length;
        
        
        
        double ResultAStwoMultibleMatrix[][] = new double[ar1_raw][ar2_col];
        if (ar1_col == ar2_raw){
            count = 0;
            //Find the Answers as vector....
            for (int i = 0;i <= ar1_raw - 1;i++){
              for (int y = 0;y <= ar2_col - 1;y++){
                for (int j = 0;j <= ar1_col - 1;j++){
                  x = j;
                  sum[count] +=M1[i][j] * M2[x][y];
                }
                count +=1;
              } 
            }
            //Find the Answers as vector....
            start = 0;
            for (int iraw =0; iraw <= ar1_raw -1 ; iraw++){
                for(int icol =0; icol<= ar2_col -1 ; icol++){
                    ResultAStwoMultibleMatrix[iraw][icol] = sum[start];
                    start +=1;
                }
            }
        }
        return ResultAStwoMultibleMatrix;
    }
    public static double[][] Matrix1PlusMatrix2(double[][] M1, double[][] M2){
        int ar1_raw = M1.length; int ar1_col = M1[0].length;
        int ar2_raw = M2.length; int ar2_col = M2[0].length;
        
        double[][] MatrixResults = new double[ar1_raw][ar1_col];
        if(ar1_col ==ar2_col && ar1_raw == ar2_raw){
            for(int iraw=0 ; iraw<=ar1_raw-1 ; iraw++){
                for(int icol=0 ; icol<=ar1_col-1; icol++){
                    MatrixResults[iraw][icol] = M1[iraw][icol] + M2[iraw][icol];
                }
            }
        }
        return MatrixResults; 
    }
    public static double[][] Matrix1MinusMatrix2(double[][] M1, double[][] M2){
        //M1 - M2
        int ar1_raw = M1.length; int ar1_col = M1[0].length;
        int ar2_raw = M2.length; int ar2_col = M2[0].length;
        
        double[][] MatrixResults = new double[ar1_raw][ar1_col];
        if(ar1_col ==ar2_col && ar1_raw == ar2_raw){
            for(int iraw=0 ; iraw<=ar1_raw-1 ; iraw++){
                for(int icol=0 ; icol<=ar1_col-1; icol++){
                    MatrixResults[iraw][icol] = M1[iraw][icol] - M2[iraw][icol];
                }
            }
        }
        return MatrixResults; 
    }
    public static double[][] MatrixInverse(double[][] M){
        int ar1_raw; int ar1_col;
        
        double[][] MatrixResultsAsInverse = new double[M.length][M[0].length];
        ar1_raw = M.length; ar1_col = M[0].length;
        
        if(ar1_col != ar1_raw){
           JOptionPane.showMessageDialog(null, "Matrix Error (Inverse Problem): Matrix is not a square Matrix");
           return MatrixResultsAsInverse;
        }
        
        double[][] a = new double[ar1_raw][ar1_col];
        // This code is copy from my Visual Basic Code, therefore I will do this next forloop for a where we don't need that while weare using Java and Java has pointer
        for (int ii=0 ; ii<= ar1_raw-1 ; ii++){
            for (int jj=0 ; jj<=ar1_col-1 ; jj++){
                a[ii][jj] = M[ii][jj];
            }
        }
        ///////////////////////////////////////Pointer Ends//////////////////////////////////////////////
        double[][] b = BuildUnitMatrix(a.length);
        ///////////////Now The following code to start calculate the inverse Matrix using Gausin Method....
        int n;
        double f;
        n = a.length;
        for (int i=1 ; i<=n-1 ; i++){
           for (int j=0 ; j<= i-1 ; j++){
               if (Format(a[j][j], "0.00000000000000") == 0){a[j][j] = 0.000000000000001;}
               f = a[i][j] / a[j][j];
               for(int m=0 ; m<=n-1 ; m++){
                   a[i][m] = a[i][m] - f*a[j][m];
                   b[i][m] = b[i][m] - f*b[j][m];
               }
           }
        }
        
        for (int i=n-2 ; i>=0 ; i--){
            for( int j=(n-1) ; j>=(i+1) ; j--){
                if(Format(a[j][j],"0.00000000000000") == 0){a[j][j] = 0.000000000000001;}
                f = a[i][j] / a[j][j];
                for(int m=(n-1) ; m>=0 ; m--){
                    a[i][m] = a[i][m] - f*a[j][m];
                    b[i][m] = b[i][m] - f*b[j][m];
                }
            }
        }
        //Here Print the Matrix
        for (int i=0 ; i<=(n-1) ; i++){
            for (int j=0 ; j<=(n-1) ; j++){
                if(Format(a[i][i],"0.00000000000000") == 0){a[i][i] = 0.000000000000001;}
                b[i][j] = Format(b[i][j],"0.000000000000000") / Format(a[i][i],"0.000000000000000") ;
            }
        }
        ////////////////////////////////////////
        for (int i=0 ; i<=(n-1) ; i++){
            for (int j=0 ; j<=(n-1) ; j++){
               MatrixResultsAsInverse[i][j] = b[i][j];
            }
        }
                
        return MatrixResultsAsInverse;
    }    
    public static double[][] BuildUnitMatrix(int SizeOfMatrix){
        double[][] UnitMatrix = new double[SizeOfMatrix][SizeOfMatrix];
        for( int iraw=0 ; iraw<=SizeOfMatrix-1 ; iraw++){
            for( int icol=0 ; icol<= SizeOfMatrix-1 ; icol++){
                if (iraw == icol){
                    UnitMatrix[iraw][icol] = 1;
                }else{
                    UnitMatrix[iraw][icol] = 0;
                }
            }
        }
        return UnitMatrix;
    }
    public static void PrintMatrix(double[][] M,String decimals){
        for (int i = 0; i <= M.length - 1;i++){
            for(int j=0; j <= M[i].length - 1;j++){
                System.out.print(" "+String.valueOf(Format(M[i][j],decimals)));
            }
            System.out.println("");
        }
       System.out.println("");
    }
    public static double[][] reduceMatrix(double[][] M, ArrayList<Integer> Index, String direction){
        
         //Direction its mean the reduction in matrix will be using coloumn and raw or only raw
         // both ==> mean delete raw and column that meet the numbers
         // raw ==> mean delete only the raw that meet the numbers
        int raw = 0;
        int col = 0;
        
        ArrayList<Integer> rawNeeded = new ArrayList<>();
        ArrayList<Integer> colNeeded = new ArrayList<>();

        boolean check = true;
        
        //Raw Needed
        for (int i = 0 ; i<= M.length-1 ; i++){
            check = true;
           for (int k = 0 ; k<=Index.size()-1 ; k++){
              if(i == Index.get(k)){
                  check = false;
              }
           }
           if(direction == "col"){check = true;}
           if(check){
              rawNeeded.add(i);
          
           }
        }
        
         //Col Needed
        for (int j = 0 ; j<= M[0].length-1 ; j++){
            check = true;
           for (int k = 0 ; k<=Index.size()-1 ; k++){
              if(j == Index.get(k)){
                  check = false;
              }
           }
           if(direction == "raw"){check = true;}
           if(check){
              colNeeded.add(j);           
           }
        }
      
          try{
               if(direction == "both"){
                double [][] newMatrix_both = new double[M.length - Index.size()][M[0].length - Index.size()];
                for (int i = 0 ; i<= newMatrix_both.length-1; i++){
                for (int j = 0 ; j<= newMatrix_both[0].length-1 ; j++){
                 newMatrix_both[i][j] = M[rawNeeded.get(i)][colNeeded.get(j)];
             }
          }
            return newMatrix_both;
            
            
            
        }else if(direction == "raw"){
              double [][] newMatrix_raw = new double[M.length - Index.size()][M[0].length];
            for (int i = 0 ; i<= newMatrix_raw.length-1; i++){
             for (int j = 0 ; j<= newMatrix_raw[0].length-1 ; j++){
                 newMatrix_raw[i][j] = M[rawNeeded.get(i)][colNeeded.get(j)];
             }
          }
            return newMatrix_raw;
        }
        else if(direction == "col"){
               double [][] newMatrix_col = new double[M.length][M[0].length - Index.size()];
               for (int i = 0 ; i<= newMatrix_col.length-1; i++){
                 for (int j = 0 ; j<= newMatrix_col[0].length-1 ; j++){
                  newMatrix_col[i][j] = M[rawNeeded.get(i)][colNeeded.get(j)];
                 }
                }
        return newMatrix_col;
        }
        else{
            double [][] newMatrix = new double[M.length - Index.size()][M[0].length - Index.size()];
            return newMatrix;
        }
        }catch(NegativeArraySizeException e){
            double [][] newMatrix = new double[M.length ][M[0].length];
            return newMatrix;
        }    
    }
    public static double Format(double value, String decimals){
        DecimalFormat df2 = new DecimalFormat( decimals );
         double newValue = new Double(df2.format(value)).doubleValue();
         return newValue;
    }
    public static void clearMatrix(double M[][]){
        try{
        for(int i=0 ; i<= M.length; i++){
            for(int j=0 ; j<=M[i].length; j++){
                M[i][j] = 0.0;
            }
        }
        M = null;
        }catch(Exception e){
            
        }
    }
    public static void clearVector(double M[]){
        try{
        for(int i=0 ; i<= M.length; i++){
                M[i] = 0.0;
        }
        M = null;
        }catch(Exception e){
            
        }
    }
    public static void clearVector(int M[]){
        try{
        for(int i=0 ; i<= M.length; i++){
                M[i] = 0;
        }
        M = null;
        }catch(Exception e){
            
        }
    }
    
    
   
    public static double[][] QF() throws IOException    {
        //axial load variables
        double b;
        double a;
        double p;
        
        //Unifrom load variables
        double bb;
        double aa;
        double cc;
        double w;
        double aaa; //aaa, bbb --> for fixed -fixed calculation
        double bbb;
        
        //Momnet Variables
        double m;
        double am;
        double bm;

        
        
        //Variables..........
        ArrayList<String[]> jointsData = new ArrayList<String[]>();
        ArrayList<String[]> membersData = new ArrayList<String[]>();
        int number_of_joints;
        int number_of_members;
        double x1,y1,z1,x2,y2,z2;
        double[][] local_loads = new double[6][1];//size 1x6 but the indixes will be 5x1
        double[][] major_loads = new double[6][1];
        double[][] TraM = new double[6][6]; //Transformation Matrix
        double cx1,cy1,cx2,cy2;
        double length,sinTheta,cosTheta;
        String TR1,TR2; //Type of Support 1 and 2
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");

        number_of_joints = JointNumbers;
        number_of_members = MemberNumbers;
        double[][] QF = new double[3*number_of_joints][1];
        //******************************************************************************//
        for (int i=0; i<=number_of_members - 1 ; i++){
            
            double x1_calculations = 0; //These all next variables are for calculate @ each point then use it for accumulative
            double y1_calculations = 0;
            double z1_calculations = 0;
            double x2_calculations = 0;
            double y2_calculations = 0;
            double z2_calculations = 0;

            cx1 = x[j1[i]];
            cy1 = y[j1[i]];
            cx2 = x[j2[i]];
            cy2 = y[j2[i]];
            
            x1 = 0;
            y1 = 0;
            z1 = 0;
            x2 = 0;
            y2 = 0;
            z2 = 0;
            
            length = Math.pow(Math.pow(cx2-cx1, 2)+Math.pow(cy2-cy1, 2), 0.5);
            
            //Using Member Method
            //TR1 = SUPPORTS.get(i).getLeftSupport();
            //TR2 = SUPPORTS.get(i).getRightSupport();
            
            //Using Joint Method
            TR1 = JOINT_SUPPORTS.get(FRAM_MEMBER.get(i).getFirstJointNumber()).getSupportType();
            TR2 = JOINT_SUPPORTS.get(FRAM_MEMBER.get(i).getSecondJointNumber()).getSupportType();
            
            
            sinTheta = (cy2 - cy1)/length;
            cosTheta = (cx2 - cx1)/length;
            
           
                //1) Fixed - Hinge
                if((TR1 == "xyz" && TR2 == "xy") || (TR1 == "xyz" && TR2 == "y") || (TR1 == "ixyz" && TR2 == "xy") ||(TR1 == "ixyz" && TR2 == "y")){
                //xyz = fixed , xy = hinge , y = roller
                    //Axial Loads Anylysis
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*b*(length+b))/(2*Math.pow(length, 2));
                         y1_calculations = (z1_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;

                    }
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y2_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(aa, 4) - 24*Math.pow(aa, 3)*bb - 4*Math.pow(aa, 3)*length + 12*Math.pow(aa, 2)*Math.pow(bb, 2) + 24*Math.pow(aa, 2)*bb*length - 4*aa*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y1_calculations = -y2_calculations - w*bb;
                         z1_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*(1 - (3*am/length) + (1.5*Math.pow(am, 2)/Math.pow(length, 2)));
                         y1_calculations = (z1_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                }
                
                //2) Hinge - Fixed
                if((TR1 == "xy" && TR2 == "xyz") || (TR1 == "y" && TR2 == "xyz") || (TR1 == "xy" && TR2 == "ixyz") || (TR1 == "y" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                //Axial Loads Anylysis
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         z2_calculations= (p*a*b*(length+a))/(2*Math.pow(length, 2));
                         y1_calculations = (z2_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y1_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(cc, 4) - 24*Math.pow(cc, 3)*bb - 4*Math.pow(cc, 3)*length + 12*Math.pow(cc, 2)*Math.pow(bb, 2) + 24*Math.pow(cc, 2)*bb*length - 4*cc*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y2_calculations = -y1_calculations - w*bb;
                         z2_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                      
                     //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z2_calculations = -m*(1 - (3*bm/length) + (1.5*Math.pow(bm, 2)/Math.pow(length, 2)));
                         y1_calculations = (z2_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //3) Fixed - Fixed
                if((TR1 == "xyz" && TR2 == "xyz") || (TR1 == "ixyz" && TR2 == "ixyz") || (TR1 == "ixyz" && TR2 == "xyz") || (TR1 == "xyz" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*Math.pow(b, 2))/(Math.pow(length, 2));
                         z2_calculations= (p*b*Math.pow(a, 2))/(Math.pow(length, 2));
                         y1_calculations = (z1_calculations+z2_calculations-(p*b))/length;
                         y2_calculations = -y1_calculations-p;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         aaa = aa + bb/2;
                         bbb = cc + bb/2;
                         /////////////////////////////Here ................................................................
                         z1_calculations = ((-w*bb)/Math.pow(length, 2))*(aaa*Math.pow(bbb, 2) + (((aaa-2*bbb)*Math.pow(bb, 2))/12));
                         z2_calculations = ((w*bb)/Math.pow(length, 2))*(bbb*Math.pow(aaa, 2) + (((bbb-2*aaa)*Math.pow(bb, 2))/12));
                         y1_calculations = (-w*bb/Math.pow(length, 3))*(((2*aaa+length)*Math.pow(bbb, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         y2_calculations = (-w*bb/Math.pow(length, 3))*(((2*bbb+length)*Math.pow(aaa, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                        //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*bm*(bm - 2*am) / Math.pow(length, 2);
                         z2_calculations =  m*bm*(2*bm - am) / Math.pow(length, 2);
                         y1_calculations = (z1_calculations+z2_calculations+m) / length;
                         y2_calculations = -y1_calculations;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //4) Hinge - Roller or Roller - Hinge or Hinge - Hinge
                if((TR1 == "xy" && TR2 == "y") || (TR1 == "y" && TR2 == "xy") || (TR1 == "xy" && TR2 == "xy")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         
                         y1_calculations = -p*b/length;
                         y2_calculations = -p*a/length;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb*(bb/2+cc)/length;
                         y2_calculations = -y1_calculations - w*bb;
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         z1_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = m / length;
                         y2_calculations = -y1_calculations;
                         
                         z1_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }   
                
                  //5) Fixed - Free
                if((TR1 == "xyz" && TR2 == "free") || (TR1 == "ixyz" && TR2 == "free")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                     
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         
                         y1_calculations = -p;
                         z1_calculations = -p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb;
                         z1_calculations = -w*bb*(bb/2+aa);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y2_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z1_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                     //5) Free - Fixed
                if((TR1 == "free" && TR2 == "xyz") || (TR1 == "free" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                     
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         
                         y2_calculations = -p;
                         z2_calculations = p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y1_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y2_calculations = -w*bb;
                         z2_calculations = w*bb*(bb/2+cc);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y1_calculations = 0;
                         z1_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z2_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                //System.out.println("x1="+x1+"  y1="+y1+"  z1="+z1+"  x2="+x2+"  y2="+y2+"  z2="+z2);

                //After we calculated the local reactions, now we need to convert it to Major X-Y Coordinates....
                //#1--Make the Transformation Matrix
                TraM[0][0] = cosTheta ; TraM[0][1]= -sinTheta ; TraM[0][2] = 0 ; TraM[0][3] =    0     ; TraM[0][4] =     0      ; TraM[0][5] = 0 ;
                TraM[1][0] = sinTheta ; TraM[1][1]=  cosTheta ; TraM[1][2] = 0 ; TraM[1][3] =    0     ; TraM[1][4] =     0      ; TraM[1][5] = 0 ; 
                TraM[2][0] =    0     ; TraM[2][1]=      0    ; TraM[2][2] = 1 ; TraM[2][3] =    0     ; TraM[2][4] =     0      ; TraM[2][5] = 0 ; 
                TraM[3][0] =    0     ; TraM[3][1]=      0    ; TraM[3][2] = 0 ; TraM[3][3] = cosTheta ; TraM[3][4] = -sinTheta  ; TraM[3][5] = 0 ;
                TraM[4][0] =    0     ; TraM[4][1]=      0    ; TraM[4][2] = 0 ; TraM[4][3] = sinTheta ; TraM[4][4] = cosTheta   ; TraM[4][5] = 0 ; 
                TraM[5][0] =    0     ; TraM[5][1]=      0    ; TraM[5][2] = 0 ; TraM[5][3] =   0      ; TraM[5][4] =     0      ; TraM[5][5] = 1 ; 

                //#2--Make the local reactions matrix
                local_loads[0][0] = x1;
                local_loads[1][0] = y1;
                local_loads[2][0] = z1;
                local_loads[3][0] = x2;
                local_loads[4][0] = y2;
                local_loads[5][0] = z2;
                
                //#3--Multiply transformation matrix by local to convert the local to major
                major_loads = MultiplayMatrix(TraM,local_loads);
                
                //#4--Combine the QF Materix that we should need to solve the frame stifness Matrix...
                QF[3*(j1[i]+1)-3][0] += major_loads[0][0];
                QF[3*(j1[i]+1)-2][0] += major_loads[1][0];
                QF[3*(j1[i]+1)-1][0] += major_loads[2][0];
                QF[3*(j2[i]+1)-3][0] += major_loads[3][0];
                QF[3*(j2[i]+1)-2][0] += major_loads[4][0];
                QF[3*(j2[i]+1)-1][0] += major_loads[5][0];

                //PrintMatrix(QF);
              }
           return QF;     
    }
    public static double[][] K() throws IOException{
    // Retrieve All data and calculate the size of K
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
                
        double[][] K = new double[3*numberOfJoint][3*numberOfJoint];
       
        for (int i = 0; i<= numberOfMember - 1; i++){
          
            double E = FRAM_MEMBER.get(i).getE() * 1E+6;
            double I = FRAM_MEMBER.get(i).getI() * 1E-12;
            double A = FRAM_MEMBER.get(i).getA() * 1E-6;
            double ly = FRAM_MEMBER.get(i).getLamda_y();
            double lx = FRAM_MEMBER.get(i).getLamda_x();
            double L = FRAM_MEMBER.get(i).getLength();
            int Ui = 3*(j1[i]+1)-3; //0
            int Vi = 3*(j1[i]+1)-2; //1
            int Mi = 3*(j1[i]+1)-1; //2
            
            int Uj = 3*(j2[i]+1)-3; //3
            int Vj = 3*(j2[i]+1)-2; //4
            int Mj = 3*(j2[i]+1)-1; //5 
                       
            //System.out.println(Ui+""+Vi+""+Mi+""+Uj+""+Vj+""+Mj);

            //Build the K Matrix/....
            K[Ui][Ui] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Ui][Vi] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Ui][Mi] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Ui][Uj] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Ui][Vj] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Ui][Mj] +=  (-6*E*I/Math.pow(L, 2))*ly;
           
            K[Vi][Ui] +=  ((A*E/L) - (12*E*I/Math.pow(L, 3)))*lx*ly;
            K[Vi][Vi] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vi][Mi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Vi][Uj] += -((A*E/L)*ly*lx - (12*E*I/Math.pow(L, 3))*lx*ly);
            K[Vi][Vj] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vi][Mj] +=  (6*E*I/Math.pow(L, 2))*lx;
           
            K[Mi][Ui] += (-6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vi] += (6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mi] += (4*E*I)/L;
            K[Mi][Uj] += (6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vj] += (-6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mj] += (2*E*I)/L;
            
            K[Uj][Ui] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Uj][Vi] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Uj][Mi] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Uj][Uj] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Uj][Vj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Uj][Mj] +=  (6*E*I/Math.pow(L, 2))*ly;
            
            K[Vj][Ui] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Vj][Vi] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vj][Mi] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Vj][Uj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Vj][Vj] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vj][Mj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            
            K[Mj][Ui] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mi] +=  (2*E*I)/L;
            K[Mj][Uj] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mj] +=  (4*E*I)/L;
            
        }   
       
        return K;
    } 
    public static double[][] Q() throws IOException{
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
        
        double[][] Q = new double[3*numberOfJoint][1];
        
        for(int i=0 ; i<= numberOfJoint-1 ; i++){
           Q[3*(i+1)-3][0] =JOINT_LOADS.get(i).get_Xload();
           Q[3*(i+1)-2][0] = JOINT_LOADS.get(i).get_Yload();
           Q[3*(i+1)-1][0] = JOINT_LOADS.get(i).get_Mload();
        }
        
        return Q;
        
    }
    public static double[][] D() throws IOException{
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
        
        double[][] D = new double[3*numberOfJoint][1];
        
       for (int i =0 ; i<= JOINT_SUPPORTS.size()-1 ; i++){
           D[3*(i+1)-3][0] = JOINT_SUPPORTS.get(i).get_d1();
           D[3*(i+1)-2][0] = JOINT_SUPPORTS.get(i).get_d2();
           D[3*(i+1)-1][0] = JOINT_SUPPORTS.get(i).get_d3();
       }
        
        return D;
    }  
    public static double[][] D_Solved(double[][] deflictionMatrix) throws IOException{
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");
        
        
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
        
        double[][] D_Solved = new double[3*numberOfJoint][1];
        
        int index = 0;
        for (int i =0 ; i<= JOINT_SUPPORTS.size()-1 ; i++){
            if(JOINT_SUPPORTS.get(i).get_d1() == 0){
                D_Solved[3*(i+1)-3][0] = 0;
            }else{
                D_Solved[3*(i+1)-3][0] = deflictionMatrix[index][0];
                index +=1;
            }
            
             if(JOINT_SUPPORTS.get(i).get_d2() == 0){
                D_Solved[3*(i+1)-2][0] = 0;
            }else{
                D_Solved[3*(i+1)-2][0] = deflictionMatrix[index][0];
                index +=1;
            }
             
              if(JOINT_SUPPORTS.get(i).get_d3() == 0){
                D_Solved[3*(i+1)-1][0] = 0;
            }else{
                D_Solved[3*(i+1)-1][0] = deflictionMatrix[index][0];
                index +=1;
            }
          
        }
        
        return D_Solved;
    } //D_Solved: D Matrix after find the unkown values so this will return a full Defliction matrix without unkowns     
    public static double[][] d(double[][] deflictionMatrix, int Beam_Index){
            int J1 = j1[Beam_Index];
            int J2 = j2[Beam_Index];
            
            double[][] d = new double[6][1];
            
            d[0][0] = deflictionMatrix[3*(J1+1)-3][0];
            d[1][0] = deflictionMatrix[3*(J1+1)-2][0];
            d[2][0] = deflictionMatrix[3*(J1+1)-1][0];

            d[3][0] = deflictionMatrix[3*(J2+1)-3][0];
            d[4][0] = deflictionMatrix[3*(J2+1)-2][0];
            d[5][0] = deflictionMatrix[3*(J2+1)-1][0];
            
            return d;
    }
    public static double[][] qf(int beam_Index) throws IOException    {
        //axial load variables
        double b;
        double a;
        double p;
        
        //Unifrom load variables
        double bb;
        double aa;
        double cc;
        double w;
        double aaa; //aaa, bbb --> for fixed -fixed calculation
        double bbb;
        
        //Momnet Variables
        double m;
        double am;
        double bm;

        
        
        //Variables..........
        ArrayList<String[]> jointsData = new ArrayList<String[]>();
        ArrayList<String[]> membersData = new ArrayList<String[]>();
        int number_of_joints;
        int number_of_members;
        double x1,y1,z1,x2,y2,z2;
        double[][] local_loads = new double[6][1];//size 1x6 but the indixes will be 5x1
        double[][] major_loads = new double[6][1];
        double[][] TraM = new double[6][6]; //Transformation Matrix
        double cx1,cy1,cx2,cy2;
        double length,sinTheta,cosTheta;
        String TR1,TR2; //Type of Support 1 and 2
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");

        number_of_joints = JointNumbers;
        number_of_members = MemberNumbers;
        
        
        double[][] QF = new double[6][1];
        //******************************************************************************//
        //for (int i=0; i<=number_of_members - 1 ; i++){
            
            double x1_calculations = 0; //These all next variables are for calculate @ each point then use it for accumulative
            double y1_calculations = 0;
            double z1_calculations = 0;
            double x2_calculations = 0;
            double y2_calculations = 0;
            double z2_calculations = 0;

            int i = beam_Index;
            cx1 = x[j1[i]];
            cy1 = y[j1[i]];
            cx2 = x[j2[i]];
            cy2 = y[j2[i]];
            
            x1 = 0;
            y1 = 0;
            z1 = 0;
            x2 = 0;
            y2 = 0;
            z2 = 0;
            
            length = Math.pow(Math.pow(cx2-cx1, 2)+Math.pow(cy2-cy1, 2), 0.5);
            
            //Using Member Method
            //TR1 = SUPPORTS.get(i).getLeftSupport();
            //TR2 = SUPPORTS.get(i).getRightSupport();
            
            //Using Joint Method
            TR1 = JOINT_SUPPORTS.get(FRAM_MEMBER.get(i).getFirstJointNumber()).getSupportType();
            TR2 = JOINT_SUPPORTS.get(FRAM_MEMBER.get(i).getSecondJointNumber()).getSupportType();
            
            
            sinTheta = (cy2 - cy1)/length;
            cosTheta = (cx2 - cx1)/length;
            
           
                //1) Fixed - Hinge
                if((TR1 == "xyz" && TR2 == "xy") || (TR1 == "xyz" && TR2 == "y") || (TR1 == "ixyz" && TR2 == "xy") ||(TR1 == "ixyz" && TR2 == "y")){
                //xyz = fixed , xy = hinge , y = roller
                    //Axial Loads Anylysis
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*b*(length+b))/(2*Math.pow(length, 2));
                         y1_calculations = (z1_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;

                    }
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y2_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(aa, 4) - 24*Math.pow(aa, 3)*bb - 4*Math.pow(aa, 3)*length + 12*Math.pow(aa, 2)*Math.pow(bb, 2) + 24*Math.pow(aa, 2)*bb*length - 4*aa*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y1_calculations = -y2_calculations - w*bb;
                         z1_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*(1 - (3*am/length) + (1.5*Math.pow(am, 2)/Math.pow(length, 2)));
                         y1_calculations = (z1_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                }
                
                //2) Hinge - Fixed
                if((TR1 == "xy" && TR2 == "xyz") || (TR1 == "y" && TR2 == "xyz") || (TR1 == "xy" && TR2 == "ixyz") || (TR1 == "y" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                //Axial Loads Anylysis
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         z2_calculations= (p*a*b*(length+a))/(2*Math.pow(length, 2));
                         y1_calculations = (z2_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y1_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(cc, 4) - 24*Math.pow(cc, 3)*bb - 4*Math.pow(cc, 3)*length + 12*Math.pow(cc, 2)*Math.pow(bb, 2) + 24*Math.pow(cc, 2)*bb*length - 4*cc*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y2_calculations = -y1_calculations - w*bb;
                         z2_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                      
                     //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z2_calculations = -m*(1 - (3*bm/length) + (1.5*Math.pow(bm, 2)/Math.pow(length, 2)));
                         y1_calculations = (z2_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //3) Fixed - Fixed
                if((TR1 == "xyz" && TR2 == "xyz") || (TR1 == "ixyz" && TR2 == "ixyz") || (TR1 == "ixyz" && TR2 == "xyz") || (TR1 == "xyz" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*Math.pow(b, 2))/(Math.pow(length, 2));
                         z2_calculations= (p*b*Math.pow(a, 2))/(Math.pow(length, 2));
                         y1_calculations = (z1_calculations+z2_calculations-(p*b))/length;
                         y2_calculations = -y1_calculations-p;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         aaa = aa + bb/2;
                         bbb = cc + bb/2;
                         /////////////////////////////Here ................................................................
                         z1_calculations = ((-w*bb)/Math.pow(length, 2))*(aaa*Math.pow(bbb, 2) + (((aaa-2*bbb)*Math.pow(bb, 2))/12));
                         z2_calculations = ((w*bb)/Math.pow(length, 2))*(bbb*Math.pow(aaa, 2) + (((bbb-2*aaa)*Math.pow(bb, 2))/12));
                         y1_calculations = (-w*bb/Math.pow(length, 3))*(((2*aaa+length)*Math.pow(bbb, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         y2_calculations = (-w*bb/Math.pow(length, 3))*(((2*bbb+length)*Math.pow(aaa, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                        //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*bm*(bm - 2*am) / Math.pow(length, 2);
                         z2_calculations =  m*bm*(2*bm - am) / Math.pow(length, 2);
                         y1_calculations = (z1_calculations+z2_calculations+m) / length;
                         y2_calculations = -y1_calculations;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //4) Hinge - Roller or Roller - Hinge or Hinge - Hinge
                if((TR1 == "xy" && TR2 == "y") || (TR1 == "y" && TR2 == "xy") || (TR1 == "xy" && TR2 == "xy")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         
                         y1_calculations = -p*b/length;
                         y2_calculations = -p*a/length;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb*(bb/2+cc)/length;
                         y2_calculations = -y1_calculations - w*bb;
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         z1_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = m / length;
                         y2_calculations = -y1_calculations;
                         
                         z1_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }   
                
                //5) Fixed - Free
                if((TR1 == "xyz" && TR2 == "free") || (TR1 == "ixyz" && TR2 == "free")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                     
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         
                         y1_calculations = -p;
                         z1_calculations = -p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb;
                         z1_calculations = -w*bb*(bb/2+aa);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y2_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z1_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //6) Free - Fixed
                if((TR1 == "free" && TR2 == "xyz") || (TR1 == "free" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= AXIAL_LOADS.get(i).getSize() - 1; j++){
                
                     
                         a = AXIAL_LOADS.get(i).getLocation(j);
                         b = length - a;
                         p = AXIAL_LOADS.get(i).getLoads(j);
               
                         
                         y2_calculations = -p;
                         z2_calculations = p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y1_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= UNIFORM_LOADS.get(i).getSize() - 1; j++){
                         aa = UNIFORM_LOADS.get(i).getStartLocation(j);
                         bb = UNIFORM_LOADS.get(i).getUniformLoadLength(j);
                         w = UNIFORM_LOADS.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y2_calculations = -w*bb;
                         z2_calculations = w*bb*(bb/2+cc);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y1_calculations = 0;
                         z1_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= MOMENT_LOADS.get(i).getSize() - 1; j++){
                         
                          m =MOMENT_LOADS.get(i).getMoments(j);
                          am = MOMENT_LOADS.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z2_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                //System.out.println("x1="+x1+"  y1="+y1+"  z1="+z1+"  x2="+x2+"  y2="+y2+"  z2="+z2);

                //After we calculated the local reactions, now we need to convert it to Major X-Y Coordinates....
                //#1--Make the Transformation Matrix
                TraM[0][0] = cosTheta ; TraM[0][1]= -sinTheta ; TraM[0][2] = 0 ; TraM[0][3] =    0     ; TraM[0][4] =     0      ; TraM[0][5] = 0 ;
                TraM[1][0] = sinTheta ; TraM[1][1]=  cosTheta ; TraM[1][2] = 0 ; TraM[1][3] =    0     ; TraM[1][4] =     0      ; TraM[1][5] = 0 ; 
                TraM[2][0] =    0     ; TraM[2][1]=      0    ; TraM[2][2] = 1 ; TraM[2][3] =    0     ; TraM[2][4] =     0      ; TraM[2][5] = 0 ; 
                TraM[3][0] =    0     ; TraM[3][1]=      0    ; TraM[3][2] = 0 ; TraM[3][3] = cosTheta ; TraM[3][4] = -sinTheta  ; TraM[3][5] = 0 ;
                TraM[4][0] =    0     ; TraM[4][1]=      0    ; TraM[4][2] = 0 ; TraM[4][3] = sinTheta ; TraM[4][4] = cosTheta   ; TraM[4][5] = 0 ; 
                TraM[5][0] =    0     ; TraM[5][1]=      0    ; TraM[5][2] = 0 ; TraM[5][3] =   0      ; TraM[5][4] =     0      ; TraM[5][5] = 1 ; 

                //#2--Make the local reactions matrix
                local_loads[0][0] = x1;
                local_loads[1][0] = y1;
                local_loads[2][0] = z1;
                local_loads[3][0] = x2;
                local_loads[4][0] = y2;
                local_loads[5][0] = z2;
                
                //#3--Multiply transformation matrix by local to convert the local to major
                major_loads = MultiplayMatrix(TraM,local_loads);
                
                //#4--Combine the QF Materix that we should need to solve the frame stifness Matrix...
                QF[0][0] += major_loads[0][0];
                QF[1][0] += major_loads[1][0];
                QF[2][0] += major_loads[2][0];
                QF[3][0] += major_loads[3][0];
                QF[4][0] += major_loads[4][0];
                QF[5][0] += major_loads[5][0];

                //PrintMatrix(QF);
              
           return QF;     
    }
    public static double[][] k_local(int beam_Index) throws IOException{
    // Retrieve All data and calculate the size of K
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");
        
       
        
        double[][] K = new double[6][6];
       
        int i = beam_Index;
          
            double E = FRAM_MEMBER.get(i).getE() * 1E+6;
            double I = FRAM_MEMBER.get(i).getI() * 1E-12;
            double A = FRAM_MEMBER.get(i).getA() * 1E-6;
            double ly = FRAM_MEMBER.get(i).getLamda_y();
            double lx = FRAM_MEMBER.get(i).getLamda_x();
            double L = FRAM_MEMBER.get(i).getLength();
            
            int Ui = 0; //0
            int Vi = 1; //1
            int Mi = 2; //2
            
            int Uj = 3; //3
            int Vj = 4; //4
            int Mj = 5; //5 
                       
            //System.out.println(Ui+""+Vi+""+Mi+""+Uj+""+Vj+""+Mj);

            //Build the K Matrix/....
            K[Ui][Ui] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Ui][Vi] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Ui][Mi] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Ui][Uj] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Ui][Vj] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Ui][Mj] +=  (-6*E*I/Math.pow(L, 2))*ly;
           
            K[Vi][Ui] +=  ((A*E/L) - (12*E*I/Math.pow(L, 3)))*lx*ly;
            K[Vi][Vi] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vi][Mi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Vi][Uj] += -((A*E/L)*ly*lx - (12*E*I/Math.pow(L, 3))*lx*ly);
            K[Vi][Vj] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vi][Mj] +=  (6*E*I/Math.pow(L, 2))*lx;
           
            K[Mi][Ui] += (-6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vi] += (6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mi] += (4*E*I)/L;
            K[Mi][Uj] += (6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vj] += (-6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mj] += (2*E*I)/L;
            
            K[Uj][Ui] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Uj][Vi] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Uj][Mi] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Uj][Uj] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Uj][Vj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Uj][Mj] +=  (6*E*I/Math.pow(L, 2))*ly;
            
            K[Vj][Ui] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Vj][Vi] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vj][Mi] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Vj][Uj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Vj][Vj] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vj][Mj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            
            K[Mj][Ui] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mi] +=  (2*E*I)/L;
            K[Mj][Uj] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mj] +=  (4*E*I)/L;
            
          
       
        return K;
    }   
    public static ArrayList<Integer> BoundryConition() throws IOException{
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        //jointsData = Text_Reader("joints.txt");
        //membersData = Text_Reader("members.txt");
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
        
       ArrayList<Integer> boundryConition = new ArrayList<>();
        
       for (int i =0 ; i<= JOINT_SUPPORTS.size()-1 ; i++){
           if(JOINT_SUPPORTS.get(i).get_d1() == 0 ){
               boundryConition.add(3*(i+1)-3);
           }
           if(JOINT_SUPPORTS.get(i).get_d2() == 0){
               boundryConition.add(3*(i+1)-2);
           }
           if(JOINT_SUPPORTS.get(i).get_d3() == 0){
               boundryConition.add(3*(i+1)-1);
           }
       }
        
        return boundryConition;
    }  
    public static void AnalysisANDprint() throws IOException{
            //--4--Boubdry Condition
        ArrayList<Integer> BC = new ArrayList<>();
        BC = BoundryConition();
        
        
        //Print Matrices and after that we can do the calculations
        PrintMatrix(Q(),"0.00");
        PrintMatrix(K(),"0.00");
        PrintMatrix(QF(),"0.00"); 
        PrintMatrix(D(),"0.00"); 

        //Print Matrix After eliminate and applied the boundry condition
        PrintMatrix(reduceMatrix(Q(),BC,"raw"),"0.00");  
        PrintMatrix(reduceMatrix(K(),BC,"both"),"0.00"); 
        PrintMatrix(reduceMatrix(D(),BC,"raw"),"0.00");
        PrintMatrix(reduceMatrix(QF(),BC,"raw"),"0.00"); 


        //---------Anylysis and solve--------------------
        double[][] Q  = reduceMatrix(Q(),BC,"raw");
        double[][] K  = reduceMatrix(K(),BC,"both");
        double[][] D  = reduceMatrix(D(),BC,"raw");
        double[][] QF = reduceMatrix(QF(),BC,"raw");
       
       // [Q] = [K][D]+[QF]
       // [K]^-1*[Q]-[QF] = [D]
       //--1--Solve For Defliction
       double[][] defliction =MultiplayMatrix(MatrixInverse(K),Matrix1MinusMatrix2(Q,QF)) ;
       PrintMatrix(defliction,"0.000000000"); 
      
        
       //--2--Combine the deflictions and get a full matrix of defliction wihout unkowns
       PrintMatrix(D_Solved(defliction),"0.000000000"); 
       double[][] D_Solved = D_Solved(defliction); //Get the full Matrix of defliction without unkowns
      
       
       //--3-- find the reaction of beams
       double[][] Beam_0_defliction = d(D_Solved,0);//Get the defliction Matrix of beam (0) first beam
       PrintMatrix(Beam_0_defliction,"0.000000000"); 
       
       double[][] Beam_0_qf = qf(0);//Get the qf Matrix of beam (0) first beam
       PrintMatrix(Beam_0_qf,"0.000000000"); 
 
       double[][] Beam_0_localK = k_local(0);//Get the qf Matrix of beam (0) first beam
       PrintMatrix(Beam_0_localK,"0.00"); 
       
       double[][] Beam_0_Reactions = Matrix1PlusMatrix2(MultiplayMatrix(Beam_0_localK,Beam_0_defliction),Beam_0_qf);//Get the qf Matrix of beam (0) first beam
       PrintMatrix(Beam_0_Reactions,"0.00"); 
               
    }
    public static double[][] get_q(double[][] D,int member_Index) throws IOException{
   
       //q = k_local(member_Index)*d(D,member_Index)+qf(member_Index);
       double[][] q = Matrix1PlusMatrix2(MultiplayMatrix(k_local(member_Index),d(D,member_Index)),qf(member_Index));
       PrintMatrix(q,"0.0000");
       return q;
   }
    
       
    
    public static double[][] QF_FINITE() throws IOException    {
        //axial load variables
        double b;
        double a;
        double p;
        
        //Unifrom load variables
        double bb;
        double aa;
        double cc;
        double w;
        double aaa; //aaa, bbb --> for fixed -fixed calculation
        double bbb;
        
        //Momnet Variables
        double m;
        double am;
        double bm;

        
        
        //Variables..........
                int number_of_joints;
        int number_of_members;
        double x1,y1,z1,x2,y2,z2;
        double[][] local_loads = new double[6][1];//size 1x6 but the indixes will be 5x1
        double[][] major_loads = new double[6][1];
        double[][] TraM = new double[6][6]; //Transformation Matrix
        double cx1,cy1,cx2,cy2;
        double length,sinTheta,cosTheta;
        String TR1,TR2; //Type of Support 1 and 2
        
      
        number_of_joints =  x_finite.size();
        number_of_members = j1_finite.size();
        double[][] QF = new double[3*number_of_joints][1];
        //******************************************************************************//
        for (int i=0; i<=number_of_members - 1 ; i++){
            
            double x1_calculations = 0; //These all next variables are for calculate @ each point then use it for accumulative
            double y1_calculations = 0;
            double z1_calculations = 0;
            double x2_calculations = 0;
            double y2_calculations = 0;
            double z2_calculations = 0;

            
            cx1 = x_finite.get(j1_finite.get(i));
            cy1 = y_finite.get(j1_finite.get(i));
            cx2 = x_finite.get(j2_finite.get(i));
            cy2 = y_finite.get(j2_finite.get(i));
            
            x1 = 0;
            y1 = 0;
            z1 = 0;
            x2 = 0;
            y2 = 0;
            z2 = 0;
            
            length = Math.pow(Math.pow(cx2-cx1, 2)+Math.pow(cy2-cy1, 2), 0.5);
            
            //Using Member Method
            //TR1 = SUPPORTS.get(i).getLeftSupport();
            //TR2 = SUPPORTS.get(i).getRightSupport();
            
            //Using Joint Method
            TR1 = joints_supports.get(fram_member.get(i).getFirstJointNumber()).getSupportType();
            TR2 = joints_supports.get(fram_member.get(i).getSecondJointNumber()).getSupportType();
            
            
            sinTheta = (cy2 - cy1)/length;
            cosTheta = (cx2 - cx1)/length;
            
           
                //1) Fixed - Hinge
                if((TR1 == "xyz" && TR2 == "xy") || (TR1 == "xyz" && TR2 == "y") || (TR1 == "ixyz" && TR2 == "xy") ||(TR1 == "ixyz" && TR2 == "y")){
                //xyz = fixed , xy = hinge , y = roller
                    //Axial Loads Anylysis
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*b*(length+b))/(2*Math.pow(length, 2));
                         y1_calculations = (z1_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;

                    }
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y2_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(aa, 4) - 24*Math.pow(aa, 3)*bb - 4*Math.pow(aa, 3)*length + 12*Math.pow(aa, 2)*Math.pow(bb, 2) + 24*Math.pow(aa, 2)*bb*length - 4*aa*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y1_calculations = -y2_calculations - w*bb;
                         z1_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*(1 - (3*am/length) + (1.5*Math.pow(am, 2)/Math.pow(length, 2)));
                         y1_calculations = (z1_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                }
                
                //2) Hinge - Fixed
                if((TR1 == "xy" && TR2 == "xyz") || (TR1 == "y" && TR2 == "xyz") || (TR1 == "xy" && TR2 == "ixyz") || (TR1 == "y" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                //Axial Loads Anylysis
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         z2_calculations= (p*a*b*(length+a))/(2*Math.pow(length, 2));
                         y1_calculations = (z2_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y1_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(cc, 4) - 24*Math.pow(cc, 3)*bb - 4*Math.pow(cc, 3)*length + 12*Math.pow(cc, 2)*Math.pow(bb, 2) + 24*Math.pow(cc, 2)*bb*length - 4*cc*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y2_calculations = -y1_calculations - w*bb;
                         z2_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                      
                     //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z2_calculations = -m*(1 - (3*bm/length) + (1.5*Math.pow(bm, 2)/Math.pow(length, 2)));
                         y1_calculations = (z2_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //3) Fixed - Fixed
                if((TR1 == "xyz" && TR2 == "xyz") || (TR1 == "ixyz" && TR2 == "ixyz") || (TR1 == "ixyz" && TR2 == "xyz") || (TR1 == "xyz" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*Math.pow(b, 2))/(Math.pow(length, 2));
                         z2_calculations= (p*b*Math.pow(a, 2))/(Math.pow(length, 2));
                         y1_calculations = (z1_calculations+z2_calculations-(p*b))/length;
                         y2_calculations = -y1_calculations-p;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         aaa = aa + bb/2;
                         bbb = cc + bb/2;
                         /////////////////////////////Here ................................................................
                         z1_calculations = ((-w*bb)/Math.pow(length, 2))*(aaa*Math.pow(bbb, 2) + (((aaa-2*bbb)*Math.pow(bb, 2))/12));
                         z2_calculations = ((w*bb)/Math.pow(length, 2))*(bbb*Math.pow(aaa, 2) + (((bbb-2*aaa)*Math.pow(bb, 2))/12));
                         y1_calculations = (-w*bb/Math.pow(length, 3))*(((2*aaa+length)*Math.pow(bbb, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         y2_calculations = (-w*bb/Math.pow(length, 3))*(((2*bbb+length)*Math.pow(aaa, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                        //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*bm*(bm - 2*am) / Math.pow(length, 2);
                         z2_calculations =  m*bm*(2*bm - am) / Math.pow(length, 2);
                         y1_calculations = (z1_calculations+z2_calculations+m) / length;
                         y2_calculations = -y1_calculations;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                     //4) Hinge - Roller or Roller - Hinge or Hinge - Hinge
                if((TR1 == "xy" && TR2 == "y") || (TR1 == "y" && TR2 == "xy") || (TR1 == "xy" && TR2 == "xy")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         
                         y1_calculations = -p*b/length;
                         y2_calculations = -p*a/length;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb*(bb/2+cc)/length;
                         y2_calculations = -y1_calculations - w*bb;
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         z1_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = m / length;
                         y2_calculations = -y1_calculations;
                         
                         z1_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //5) Fixed - Free
                if((TR1 == "xyz" && TR2 == "free") || (TR1 == "ixyz" && TR2 == "free")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                     
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         
                         y1_calculations = -p;
                         z1_calculations = -p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb;
                         z1_calculations = -w*bb*(bb/2+aa);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y2_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z1_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                     //6) Free - Fixed
                if((TR1 == "free" && TR2 == "xyz") || (TR1 == "free" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                     
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         
                         y2_calculations = -p;
                         z2_calculations = p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y1_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y2_calculations = -w*bb;
                         z2_calculations = w*bb*(bb/2+cc);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y1_calculations = 0;
                         z1_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z2_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                //System.out.println("x1="+x1+"  y1="+y1+"  z1="+z1+"  x2="+x2+"  y2="+y2+"  z2="+z2);

                //After we calculated the local reactions, now we need to convert it to Major X-Y Coordinates....
                //#1--Make the Transformation Matrix
                TraM[0][0] = cosTheta ; TraM[0][1]= -sinTheta ; TraM[0][2] = 0 ; TraM[0][3] =    0     ; TraM[0][4] =     0      ; TraM[0][5] = 0 ;
                TraM[1][0] = sinTheta ; TraM[1][1]=  cosTheta ; TraM[1][2] = 0 ; TraM[1][3] =    0     ; TraM[1][4] =     0      ; TraM[1][5] = 0 ; 
                TraM[2][0] =    0     ; TraM[2][1]=      0    ; TraM[2][2] = 1 ; TraM[2][3] =    0     ; TraM[2][4] =     0      ; TraM[2][5] = 0 ; 
                TraM[3][0] =    0     ; TraM[3][1]=      0    ; TraM[3][2] = 0 ; TraM[3][3] = cosTheta ; TraM[3][4] = -sinTheta  ; TraM[3][5] = 0 ;
                TraM[4][0] =    0     ; TraM[4][1]=      0    ; TraM[4][2] = 0 ; TraM[4][3] = sinTheta ; TraM[4][4] = cosTheta   ; TraM[4][5] = 0 ; 
                TraM[5][0] =    0     ; TraM[5][1]=      0    ; TraM[5][2] = 0 ; TraM[5][3] =   0      ; TraM[5][4] =     0      ; TraM[5][5] = 1 ; 

                //#2--Make the local reactions matrix
                local_loads[0][0] = x1;
                local_loads[1][0] = y1;
                local_loads[2][0] = z1;
                local_loads[3][0] = x2;
                local_loads[4][0] = y2;
                local_loads[5][0] = z2;
                
                //#3--Multiply transformation matrix by local to convert the local to major
                major_loads = MultiplayMatrix(TraM,local_loads);
                
                //#4--Combine the QF Materix that we should need to solve the frame stifness Matrix...
                QF[3*(j1_finite.get(i)+1)-3][0] += major_loads[0][0];
                QF[3*(j1_finite.get(i)+1)-2][0] += major_loads[1][0];
                QF[3*(j1_finite.get(i)+1)-1][0] += major_loads[2][0];
                QF[3*(j2_finite.get(i)+1)-3][0] += major_loads[3][0];
                QF[3*(j2_finite.get(i)+1)-2][0] += major_loads[4][0];
                QF[3*(j2_finite.get(i)+1)-1][0] += major_loads[5][0];

                //PrintMatrix(QF);
              }
           return QF;     
    } 
    public static double[][] K_FINITE() throws IOException{
    // Retrieve All data and calculate the size of K
        int numberOfJoint = x_finite.size();
        int numberOfMember = j1_finite.size();
        
        double[][] K = new double[3*numberOfJoint][3*numberOfJoint];
       
        for (int i = 0; i<= numberOfMember - 1; i++){
          
            double E = fram_member.get(i).getE() * 1E+6;
            double I = fram_member.get(i).getI() * 1E-12;
            double A = fram_member.get(i).getA() * 1E-6;
            double ly = fram_member.get(i).getLamda_y();
            double lx = fram_member.get(i).getLamda_x();
            double L = fram_member.get(i).getLength();
            int Ui = 3*(j1_finite.get(i)+1)-3; //0 
            int Vi = 3*(j1_finite.get(i)+1)-2; //1
            int Mi = 3*(j1_finite.get(i)+1)-1; //2
            
            int Uj = 3*(j2_finite.get(i)+1)-3; //3
            int Vj = 3*(j2_finite.get(i)+1)-2; //4
            int Mj = 3*(j2_finite.get(i)+1)-1; //5 
                       
            //System.out.println(Ui+""+Vi+""+Mi+""+Uj+""+Vj+""+Mj);

            //Build the K Matrix/....
            K[Ui][Ui] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Ui][Vi] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Ui][Mi] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Ui][Uj] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Ui][Vj] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Ui][Mj] +=  (-6*E*I/Math.pow(L, 2))*ly;
           
            K[Vi][Ui] +=  ((A*E/L) - (12*E*I/Math.pow(L, 3)))*lx*ly;
            K[Vi][Vi] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vi][Mi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Vi][Uj] += -((A*E/L)*ly*lx - (12*E*I/Math.pow(L, 3))*lx*ly);
            K[Vi][Vj] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vi][Mj] +=  (6*E*I/Math.pow(L, 2))*lx;
           
            K[Mi][Ui] += (-6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vi] += (6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mi] += (4*E*I)/L;
            K[Mi][Uj] += (6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vj] += (-6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mj] += (2*E*I)/L;
            
            K[Uj][Ui] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Uj][Vi] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Uj][Mi] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Uj][Uj] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Uj][Vj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Uj][Mj] +=  (6*E*I/Math.pow(L, 2))*ly;
            
            K[Vj][Ui] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Vj][Vi] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vj][Mi] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Vj][Uj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Vj][Vj] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vj][Mj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            
            K[Mj][Ui] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mi] +=  (2*E*I)/L;
            K[Mj][Uj] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mj] +=  (4*E*I)/L;
            
        }   
       
        return K;
    }   
    public static double[][] Q_FINITE() throws IOException{
              
        int numberOfJoint = x_finite.size();
        int numberOfMember = j1_finite.size();
        
        double[][] Q = new double[3*numberOfJoint][1];
        
        for(int i=0 ; i<= numberOfJoint-1 ; i++){
           Q[3*(i+1)-3][0] =joint_loads.get(i).get_Xload();
           Q[3*(i+1)-2][0] = joint_loads.get(i).get_Yload();
           Q[3*(i+1)-1][0] = joint_loads.get(i).get_Mload();
        }
        
        return Q;
        
    }    
    public static double[][] D_FINITE() throws IOException{
              
        int numberOfJoint = x_finite.size();
        int numberOfMember = j1_finite.size();
        
        double[][] D = new double[3*numberOfJoint][1];
        
       for (int i =0 ; i<= joints_supports.size()-1 ; i++){
           D[3*(i+1)-3][0] = joints_supports.get(i).get_d1();
           D[3*(i+1)-2][0] = joints_supports.get(i).get_d2();
           D[3*(i+1)-1][0] = joints_supports.get(i).get_d3();
       }
        
        return D;
    }  
    public static double[][] D_Solved_FINITE(double[][] deflictionMatrix) throws IOException{
        int numberOfJoint = x_finite.size();
        int numberOfMember = j1_finite.size();
        
        double[][] D_Solved = new double[3*numberOfJoint][1];
        
        int index = 0;
        for (int i =0 ; i<= joints_supports.size()-1 ; i++){
            if(joints_supports.get(i).get_d1() == 0){
                D_Solved[3*(i+1)-3][0] = 0;
            }else{
                D_Solved[3*(i+1)-3][0] = deflictionMatrix[index][0];
                index +=1;
            }
            
             if(joints_supports.get(i).get_d2() == 0){
                D_Solved[3*(i+1)-2][0] = 0;
            }else{
                D_Solved[3*(i+1)-2][0] = deflictionMatrix[index][0];
                index +=1;
            }
             
              if(joints_supports.get(i).get_d3() == 0){
                D_Solved[3*(i+1)-1][0] = 0;
            }else{
                D_Solved[3*(i+1)-1][0] = deflictionMatrix[index][0];
                index +=1;
            }
          
        }
        
        return D_Solved;
    } //D_Solved: D Matrix after find the unkown values so this will return a full Defliction matrix without unkowns   
    public static double[][] d_FINITE(double[][] deflictionMatrix, int Beam_Index){
            int J1 = j1_finite.get(Beam_Index);
            int J2 = j2_finite.get(Beam_Index);
            
            double[][] d = new double[6][1];
            
            d[0][0] = deflictionMatrix[3*(J1+1)-3][0];
            d[1][0] = deflictionMatrix[3*(J1+1)-2][0];
            d[2][0] = deflictionMatrix[3*(J1+1)-1][0];

            d[3][0] = deflictionMatrix[3*(J2+1)-3][0];
            d[4][0] = deflictionMatrix[3*(J2+1)-2][0];
            d[5][0] = deflictionMatrix[3*(J2+1)-1][0];
            
            return d;
    }
    public static double[][] qf_FINITE(int beam_Index) throws IOException    {
        //axial load variables
        double b;
        double a;
        double p;
        
        //Unifrom load variables
        double bb;
        double aa;
        double cc;
        double w;
        double aaa; //aaa, bbb --> for fixed -fixed calculation
        double bbb;
        
        //Momnet Variables
        double m;
        double am;
        double bm;

        
        
        //Variables..........
      
        double x1,y1,z1,x2,y2,z2;
        double[][] local_loads = new double[6][1];//size 1x6 but the indixes will be 5x1
        double[][] major_loads = new double[6][1];
        double[][] TraM = new double[6][6]; //Transformation Matrix
        double cx1,cy1,cx2,cy2;
        double length,sinTheta,cosTheta;
        String TR1,TR2; //Type of Support 1 and 2
        
        int number_of_joints = x_finite.size();
        int number_of_members = j1_finite.size();
        double[][] QF = new double[6][1];
        //******************************************************************************//
        //for (int i=0; i<=number_of_members - 1 ; i++){
            
            double x1_calculations = 0; //These all next variables are for calculate @ each point then use it for accumulative
            double y1_calculations = 0;
            double z1_calculations = 0;
            double x2_calculations = 0;
            double y2_calculations = 0;
            double z2_calculations = 0;

            int i = beam_Index;
            cx1 = x_finite.get(j1_finite.get(i));
            cy1 = y_finite.get(j1_finite.get(i));
            cx2 = x_finite.get(j2_finite.get(i));
            cy2 = y_finite.get(j2_finite.get(i));
            
            x1 = 0;
            y1 = 0;
            z1 = 0;
            x2 = 0;
            y2 = 0;
            z2 = 0;
            
            length = Math.pow(Math.pow(cx2-cx1, 2)+Math.pow(cy2-cy1, 2), 0.5);
            
            //Using Member Method
            //TR1 = SUPPORTS.get(i).getLeftSupport();
            //TR2 = SUPPORTS.get(i).getRightSupport();
            
            //Using Joint Method
            TR1 = joints_supports.get(fram_member.get(i).getFirstJointNumber()).getSupportType();
            TR2 = joints_supports.get(fram_member.get(i).getSecondJointNumber()).getSupportType();
            
            
            sinTheta = (cy2 - cy1)/length;
            cosTheta = (cx2 - cx1)/length;
            
           
                //1) Fixed - Hinge
                if((TR1 == "xyz" && TR2 == "xy") || (TR1 == "xyz" && TR2 == "y") || (TR1 == "ixyz" && TR2 == "xy") ||(TR1 == "ixyz" && TR2 == "y")){
                //xyz = fixed , xy = hinge , y = roller
                    //Axial Loads Anylysis
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*b*(length+b))/(2*Math.pow(length, 2));
                         y1_calculations = (z1_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;

                    }
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y2_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(aa, 4) - 24*Math.pow(aa, 3)*bb - 4*Math.pow(aa, 3)*length + 12*Math.pow(aa, 2)*Math.pow(bb, 2) + 24*Math.pow(aa, 2)*bb*length - 4*aa*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y1_calculations = -y2_calculations - w*bb;
                         z1_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*(1 - (3*am/length) + (1.5*Math.pow(am, 2)/Math.pow(length, 2)));
                         y1_calculations = (z1_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }
                }
                
                //2) Hinge - Fixed
                if((TR1 == "xy" && TR2 == "xyz") || (TR1 == "y" && TR2 == "xyz") || (TR1 == "xy" && TR2 == "ixyz") || (TR1 == "y" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                //Axial Loads Anylysis
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         z2_calculations= (p*a*b*(length+a))/(2*Math.pow(length, 2));
                         y1_calculations = (z2_calculations - p*b)/length;
                         y2_calculations = -y1_calculations - p;
                         
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         /////////////////////////////Here ................................................................
                         y1_calculations = (-w/(8*Math.pow(length, 3)))*(7*Math.pow(cc, 4) - 24*Math.pow(cc, 3)*bb - 4*Math.pow(cc, 3)*length + 12*Math.pow(cc, 2)*Math.pow(bb, 2) + 24*Math.pow(cc, 2)*bb*length - 4*cc*Math.pow(bb, 3) - 1*Math.pow(bb, 4) + 4*Math.pow(bb, 3)*length);
                         y2_calculations = -y1_calculations - w*bb;
                         z2_calculations = y1_calculations*length + w*bb*(bb/2 + cc);

                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                      
                     //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z2_calculations = -m*(1 - (3*bm/length) + (1.5*Math.pow(bm, 2)/Math.pow(length, 2)));
                         y1_calculations = (z2_calculations + m) /length ;
                         y2_calculations = -y1_calculations;
                        
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //3) Fixed - Fixed
                if((TR1 == "xyz" && TR2 == "xyz") || (TR1 == "ixyz" && TR2 == "ixyz") || (TR1 == "ixyz" && TR2 == "xyz") || (TR1 == "xyz" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         z1_calculations= (-p*a*Math.pow(b, 2))/(Math.pow(length, 2));
                         z2_calculations= (p*b*Math.pow(a, 2))/(Math.pow(length, 2));
                         y1_calculations = (z1_calculations+z2_calculations-(p*b))/length;
                         y2_calculations = -y1_calculations-p;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                      //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                         aaa = aa + bb/2;
                         bbb = cc + bb/2;
                         /////////////////////////////Here ................................................................
                         z1_calculations = ((-w*bb)/Math.pow(length, 2))*(aaa*Math.pow(bbb, 2) + (((aaa-2*bbb)*Math.pow(bb, 2))/12));
                         z2_calculations = ((w*bb)/Math.pow(length, 2))*(bbb*Math.pow(aaa, 2) + (((bbb-2*aaa)*Math.pow(bb, 2))/12));
                         y1_calculations = (-w*bb/Math.pow(length, 3))*(((2*aaa+length)*Math.pow(bbb, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         y2_calculations = (-w*bb/Math.pow(length, 3))*(((2*bbb+length)*Math.pow(aaa, 2))+(((aaa-bbb)/4)*Math.pow(bb, 2)));
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                        //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                         z1_calculations = -m*bm*(bm - 2*am) / Math.pow(length, 2);
                         z2_calculations =  m*bm*(2*bm - am) / Math.pow(length, 2);
                         y1_calculations = (z1_calculations+z2_calculations+m) / length;
                         y2_calculations = -y1_calculations;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                     //4) Hinge - Roller or Roller - Hinge or Hinge - Hinge
                if((TR1 == "xy" && TR2 == "y") || (TR1 == "y" && TR2 == "xy") || (TR1 == "xy" && TR2 == "xy")){
                //xyz = fixed , xy = hinge , y = roller
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         
                         y1_calculations = -p*b/length;
                         y2_calculations = -p*a/length;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         z1_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb*(bb/2+cc)/length;
                         y2_calculations = -y1_calculations - w*bb;
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         z1_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = m / length;
                         y2_calculations = -y1_calculations;
                         
                         z1_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                //5) Fixed - Free
                if((TR1 == "xyz" && TR2 == "free") || (TR1 == "ixyz" && TR2 == "free")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                     
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         
                         y1_calculations = -p;
                         z1_calculations = -p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y1_calculations = -w*bb;
                         z1_calculations = -w*bb*(bb/2+aa);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y2_calculations = 0;
                         z2_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z1_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z2_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                
                     //6) Free - Fixed
                if((TR1 == "free" && TR2 == "xyz") || (TR1 == "free" && TR2 == "ixyz")){
                //xyz = fixed , xy = hinge , y = roller, free = free
                    for (int j = 0 ; j<= axial_loads.get(i).getSize() - 1; j++){
                
                     
                         a = axial_loads.get(i).getLocation(j);
                         b = length - a;
                         p = axial_loads.get(i).getLoads(j);
               
                         
                         y2_calculations = -p;
                         z2_calculations = p*a;
                         
                         x1_calculations = 0;
                         x2_calculations = 0;
                         y1_calculations = 0;
                         z1_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                         
                    }
                    
                    //Uniform Loads Anylysis
                      for (int j = 0 ; j<= uniform_loads.get(i).getSize() - 1; j++){
                         aa = uniform_loads.get(i).getStartLocation(j);
                         bb = uniform_loads.get(i).getUniformLoadLength(j);
                         w = uniform_loads.get(i).getUniformLoadValue(j);
                         cc = length - (aa+bb);
                        
                         /////////////////////////////Here ................................................................
                        
                         y2_calculations = -w*bb;
                         z2_calculations = w*bb*(bb/2+cc);
                         
                         x1_calculations = 0;
                         x2_calculations = 0; 
                         y1_calculations = 0;
                         z1_calculations = 0; 
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                    }
                      
                      //Moment Loads Anylysis
                      for (int j = 0 ; j<= moment_load.get(i).getSize() - 1; j++){
                         
                          m =moment_load.get(i).getMoments(j);
                          am = moment_load.get(i).getLocation(j);
                          bm = length - am;
                          
                         /////////////////////////////Here ................................................................
                        
                         z2_calculations = -m;
                         
                         y1_calculations = 0;
                         y2_calculations = 0;
                         z1_calculations = 0;
                         x1_calculations = 0;
                         x2_calculations = 0;
                         
                         x1 += x1_calculations;
                         y1 += y1_calculations;
                         z1 += z1_calculations;
                         x2 += x2_calculations;
                         y2 += y2_calculations;
                         z2 += z2_calculations;
                        }  
                }
                //System.out.println("x1="+x1+"  y1="+y1+"  z1="+z1+"  x2="+x2+"  y2="+y2+"  z2="+z2);

                //After we calculated the local reactions, now we need to convert it to Major X-Y Coordinates....
                //#1--Make the Transformation Matrix
                TraM[0][0] = cosTheta ; TraM[0][1]= -sinTheta ; TraM[0][2] = 0 ; TraM[0][3] =    0     ; TraM[0][4] =     0      ; TraM[0][5] = 0 ;
                TraM[1][0] = sinTheta ; TraM[1][1]=  cosTheta ; TraM[1][2] = 0 ; TraM[1][3] =    0     ; TraM[1][4] =     0      ; TraM[1][5] = 0 ; 
                TraM[2][0] =    0     ; TraM[2][1]=      0    ; TraM[2][2] = 1 ; TraM[2][3] =    0     ; TraM[2][4] =     0      ; TraM[2][5] = 0 ; 
                TraM[3][0] =    0     ; TraM[3][1]=      0    ; TraM[3][2] = 0 ; TraM[3][3] = cosTheta ; TraM[3][4] = -sinTheta  ; TraM[3][5] = 0 ;
                TraM[4][0] =    0     ; TraM[4][1]=      0    ; TraM[4][2] = 0 ; TraM[4][3] = sinTheta ; TraM[4][4] = cosTheta   ; TraM[4][5] = 0 ; 
                TraM[5][0] =    0     ; TraM[5][1]=      0    ; TraM[5][2] = 0 ; TraM[5][3] =   0      ; TraM[5][4] =     0      ; TraM[5][5] = 1 ; 

                //#2--Make the local reactions matrix
                local_loads[0][0] = x1;
                local_loads[1][0] = y1;
                local_loads[2][0] = z1;
                local_loads[3][0] = x2;
                local_loads[4][0] = y2;
                local_loads[5][0] = z2;
                
                //#3--Multiply transformation matrix by local to convert the local to major
                major_loads = MultiplayMatrix(TraM,local_loads);
                
                //#4--Combine the QF Materix that we should need to solve the frame stifness Matrix...
                QF[0][0] += major_loads[0][0];
                QF[1][0] += major_loads[1][0];
                QF[2][0] += major_loads[2][0];
                QF[3][0] += major_loads[3][0];
                QF[4][0] += major_loads[4][0];
                QF[5][0] += major_loads[5][0];

                //PrintMatrix(QF);
              
           return QF;     
    }
    public static double[][] k_local_FINITE(int beam_Index) throws IOException{
    // Retrieve All data and calculate the size of K
     
        double[][] K = new double[6][6];
       
        int i = beam_Index;
          
            double E = fram_member.get(i).getE() * 1E+6;
            double I = fram_member.get(i).getI() * 1E-12;
            double A = fram_member.get(i).getA() * 1E-6;
            double ly = fram_member.get(i).getLamda_y();
            double lx = fram_member.get(i).getLamda_x();
            double L = fram_member.get(i).getLength();
            
            int Ui = 0; //0
            int Vi = 1; //1
            int Mi = 2; //2
            
            int Uj = 3; //3
            int Vj = 4; //4
            int Mj = 5; //5 
                       
            //System.out.println(Ui+""+Vi+""+Mi+""+Uj+""+Vj+""+Mj);

            //Build the K Matrix/....
            K[Ui][Ui] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Ui][Vi] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Ui][Mi] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Ui][Uj] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Ui][Vj] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Ui][Mj] +=  (-6*E*I/Math.pow(L, 2))*ly;
           
            K[Vi][Ui] +=  ((A*E/L) - (12*E*I/Math.pow(L, 3)))*lx*ly;
            K[Vi][Vi] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vi][Mi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Vi][Uj] += -((A*E/L)*ly*lx - (12*E*I/Math.pow(L, 3))*lx*ly);
            K[Vi][Vj] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vi][Mj] +=  (6*E*I/Math.pow(L, 2))*lx;
           
            K[Mi][Ui] += (-6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vi] += (6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mi] += (4*E*I)/L;
            K[Mi][Uj] += (6*E*I/Math.pow(L, 2))*ly;
            K[Mi][Vj] += (-6*E*I/Math.pow(L, 2))*lx;
            K[Mi][Mj] += (2*E*I)/L;
            
            K[Uj][Ui] += -((A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2));
            K[Uj][Vi] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Uj][Mi] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Uj][Uj] +=  (A*E/L)*Math.pow(lx, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(ly, 2);
            K[Uj][Vj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Uj][Mj] +=  (6*E*I/Math.pow(L, 2))*ly;
            
            K[Vj][Ui] += -((A*E/L)*lx*ly - (12*E*I/Math.pow(L, 3))*ly*lx);
            K[Vj][Vi] += -((A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2));
            K[Vj][Mi] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Vj][Uj] +=  ((A*E/L)-(12*E*I/Math.pow(L, 3))) * lx * ly;
            K[Vj][Vj] +=  (A*E/L)*Math.pow(ly, 2) + (12*E*I/Math.pow(L, 3))*Math.pow(lx, 2);
            K[Vj][Mj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            
            K[Mj][Ui] +=  (-6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vi] +=  (6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mi] +=  (2*E*I)/L;
            K[Mj][Uj] +=  (6*E*I/Math.pow(L, 2))*ly;
            K[Mj][Vj] +=  (-6*E*I/Math.pow(L, 2))*lx;
            K[Mj][Mj] +=  (4*E*I)/L;
            
          
       
        return K;
    }
    public static void FEM111(int NumberOfElement) throws IOException{
        x_finite.clear();
        y_finite.clear();
        j1_finite.clear();
        j2_finite.clear();
        joints_supports.clear();
        joint_loads.clear();
        fram_member.clear();
        axial_loads.clear();
        uniform_loads.clear();
        moment_load.clear();
        // Retrieve All data and calculate the size of K
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        jointsData = Text_Reader("joints.txt");
        membersData = Text_Reader("members.txt");
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
        int numberOfMemebr_after_FEM = numberOfMember*NumberOfElement;
        
        double x1,y1,x2,y2;
        double step, L;
        double cos_theta, sin_theta;
        
        int count=0; // to fill the j1 and j2 help in dividing
        
        //Initilize the joints....
        for (int i=0 ; i<= numberOfMemebr_after_FEM ; i++){
            joints_supports.add(new JointSupport("free"));
        }
        
        for(int i=0 ; i<=numberOfMember-1 ; i++){
             x1 = x[j1[i]];
             y1 = y[j1[i]];
             x2 = x[j2[i]];
             y2 = y[j2[i]];
            
             L = Math.sqrt(Math.pow((x2-x1), 2)+Math.pow((y2-y1), 2));
             
             cos_theta = (x2-x1)/L;
             sin_theta = (y2-y1)/L;

             step = L / NumberOfElement;
             
             String LeftSupport = JOINT_SUPPORTS.get(j1[i]).getSupportType();
             String RightSupport = JOINT_SUPPORTS.get(j2[i]).getSupportType();
             
             double E = FRAM_MEMBER.get(i).getE();
             double I = FRAM_MEMBER.get(i).getI();
             double A = FRAM_MEMBER.get(i).getA();

             
             int NumberOfAxialLoadOnThisMember = AXIAL_LOADS.get(i).getSize();
             int NumberOfUniformLoadOnThisMember = UNIFORM_LOADS.get(i).getSize();
             int NumberOfMomentLoadOnThisMember = MOMENT_LOADS.get(i).getSize();
             
             //Loads at joints...
             double X_Load_leftJoint = JOINT_LOADS.get(j1[i]).get_Xload();
             double Y_Load_leftJoint = JOINT_LOADS.get(j1[i]).get_Yload();
             double M_Load_leftJoint = JOINT_LOADS.get(j1[i]).get_Mload();
             
             double X_Load_RightJoint = JOINT_LOADS.get(j2[i]).get_Xload();
             double Y_Load_RightJoint = JOINT_LOADS.get(j2[i]).get_Yload();
             double M_Load_RightJoint = JOINT_LOADS.get(j2[i]).get_Mload();

             //----1------Make joints (x,y)
             double x = x1;
             double y = y1;
             for(int j=0 ; j<= NumberOfElement;j++){
                 if((x_finite.size() != 0) && (y_finite.size() !=0)){
                     if((x_finite.get(x_finite.size()-1) == x) && (y_finite.get(y_finite.size()-1) == y)){
                         //System.out.println("similir");
                         
                     }else{
                         //System.out.println("nonsimilir");
                         x_finite.add(Format(x,"0.000"));
                         y_finite.add(Format(y,"0.000"));
                     }
                 }else{
                     x_finite.add(x);
                     y_finite.add(y);
                 }
                 
                 
                 x += step*cos_theta;
                 y += step*sin_theta;
             }
             
             //----2-------Make members (j1,j2)
             for(int j=count ; j<=(count+NumberOfElement-1); j++){
               j1_finite.add(j);
               j2_finite.add(j+1);
               
               fram_member.add(new FramMember(j,j+1,x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1),E,I,A));
               axial_loads.add(new AxialLoad(x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1)));
               uniform_loads.add(new UniformLoad(x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1)));
               moment_load.add(new MomentLoad(x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1)));              
             }
              //----2-------Make Joints load (X,Y,M)
             for(int j=count ; j<=(count+NumberOfElement); j++){
                 joint_loads.add(new JointLoad(j,0,0,0));
                 
                 if(j == count){
                  joint_loads.get(j).editForce(1, X_Load_leftJoint);
                  joint_loads.get(j).editForce(2, Y_Load_leftJoint);
                  joint_loads.get(j).editForce(3, M_Load_leftJoint);
                 }else if(j == count+NumberOfElement){
                  joint_loads.get(j).editForce(1, X_Load_RightJoint);
                  joint_loads.get(j).editForce(2, Y_Load_RightJoint);
                  joint_loads.get(j).editForce(3, M_Load_RightJoint);  
                 } 
             }
             //----22-------Make Loads
             for(int j=count ; j<=(count+NumberOfElement-1); j++){ 
               int MemberIndex = j;
               //Fill the axial_loads
               for(int k = 0 ; k<=NumberOfAxialLoadOnThisMember-1 ; k++){
                   double load_coordinate = AXIAL_LOADS.get(i).getLocation(k);
                   double load_value = AXIAL_LOADS.get(i).getLoads(k);
                   
                   double XcoordinateOfFirstJoint = x1;
                   double XcoordinateOfleftoffinitemember  = x_finite.get(j);
                   double XcoordinateOfRightoffinitemember = x_finite.get(j+1);
                   
                   double YcoordinateOfFirstJoint = y1;
                   double YcoordinateOfleftoffinitemember  = y_finite.get(j);
                   double YcoordinateOfRightoffinitemember = y_finite.get(j+1);
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j) - x1), 2)+Math.pow((y_finite.get(j) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j+1) - x1), 2)+Math.pow((y_finite.get(j+1) - y1), 2));

                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       axial_loads.get(j).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+j+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       axial_loads.get(j).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+j+" @ "+(load_coordinate-LeftJointDistance));
                   }        
               }
               //Fill the Moment load...
               for(int k = 0 ; k<=NumberOfMomentLoadOnThisMember-1 ; k++){
                   double load_coordinate = MOMENT_LOADS.get(i).getLocation(k);
                   double load_value = MOMENT_LOADS.get(i).getMoments(k);
                   
                   double XcoordinateOfFirstJoint = x1;
                   double XcoordinateOfleftoffinitemember  = x_finite.get(j);
                   double XcoordinateOfRightoffinitemember = x_finite.get(j+1);
                   
                   double YcoordinateOfFirstJoint = y1;
                   double YcoordinateOfleftoffinitemember  = y_finite.get(j);
                   double YcoordinateOfRightoffinitemember = y_finite.get(j+1);
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j) - x1), 2)+Math.pow((y_finite.get(j) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j+1) - x1), 2)+Math.pow((y_finite.get(j+1) - y1), 2));

                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       moment_load.get(j).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       moment_load.get(j).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                   } 
               }
                //Fill the uniformloads
               for(int k = 0 ; k<=NumberOfUniformLoadOnThisMember-1 ; k++){
                   double uniformLoadValue = UNIFORM_LOADS.get(i).getUniformLoadValue(k);
                   double a = UNIFORM_LOADS.get(i).getStartLocation(k); //start location of the unifrom load
                   double b = a + UNIFORM_LOADS.get(i).getUniformLoadLength(k);//location of the ends of the uniform load
                   
                   double XcoordinateOfFirstJoint = x1;
                   double XcoordinateOfleftoffinitemember  = x_finite.get(j);
                   double XcoordinateOfRightoffinitemember = x_finite.get(j+1);
                   
                   double YcoordinateOfFirstJoint = y1;
                   double YcoordinateOfleftoffinitemember  = y_finite.get(j);
                   double YcoordinateOfRightoffinitemember = y_finite.get(j+1);
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j) - x1), 2)+Math.pow((y_finite.get(j) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j+1) - x1), 2)+Math.pow((y_finite.get(j+1) - y1), 2));

                   //System.out.println("Here  "+LeftJointDistance+" "+RightJointDistance+",,"+a+","+b+"membr "+j+"length="+uniform_loads.get(j).getMemberLength());
                   //Test if the uniform_load within the member and if(true) Add it....
                   //left point out and riht point is in
                   if(((LeftJointDistance<=a && LeftJointDistance<=b) || (LeftJointDistance>=a && LeftJointDistance>=b)) && (RightJointDistance>=a && RightJointDistance<=b)){
                       uniform_loads.get(j).AddUniformLoad(uniformLoadValue, a - LeftJointDistance, RightJointDistance - a,false);
                   }
                   /*Both In*/
                   else if((LeftJointDistance>=a && LeftJointDistance<=b) && (RightJointDistance>=a && RightJointDistance<=b) ){
                       System.out.println("both");
                       uniform_loads.get(j).AddUniformLoad(uniformLoadValue, 0, RightJointDistance - LeftJointDistance,false);
                   }
                   /*Left in and riht is out*/
                   else if(((RightJointDistance<=a && RightJointDistance<=b) || (RightJointDistance>=a && RightJointDistance>=b)) && (LeftJointDistance>=a && LeftJointDistance<=b)){
                       uniform_loads.get(j).AddUniformLoad(uniformLoadValue, 0, b - LeftJointDistance,false);
                   }
                   /*Both are out*/
                   else{
                        
                   }
               }
             }
             
             //----3-----Make Supports
             for (int j=count ; j<=(count+NumberOfElement) ; j++){
                 if(j == count)
                 {
                   joints_supports.get(j).set_Support(LeftSupport);
                 }else if(j==count+NumberOfElement){
                   joints_supports.get(j).set_Support(RightSupport);
                 }else{
                   joints_supports.get(j).set_Support("ixyz");
                 }
             }
             
             //---4----Make the loads
             count = count + NumberOfElement;
        }
       
    }  
    public static void FEM222(int NumberOfElement) throws IOException{
        x_finite.clear();
        y_finite.clear();
        j1_finite.clear();
        j2_finite.clear();
        joints_supports.clear();
        joint_loads.clear();
        fram_member.clear();
        axial_loads.clear();
        uniform_loads.clear();
        moment_load.clear();
        // Retrieve All data and calculate the size of K
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        jointsData = Text_Reader("joints.txt");
        membersData = Text_Reader("members.txt");
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
        int numberOfMemebr_after_FEM = numberOfMember*NumberOfElement;
        
        double x1,y1,x2,y2;
        double step, L;
        double cos_theta, sin_theta;
        
        int count=0; // to fill the j1 and j2 help in dividing
        
        //Initilize the joints....
        for (int i=0 ; i<= numberOfMemebr_after_FEM ; i++){
            joints_supports.add(new JointSupport("free"));
        }
        
        for(int i=0 ; i<=numberOfMember-1 ; i++){
             x1 = x[j1[i]];
             y1 = y[j1[i]];
             x2 = x[j2[i]];
             y2 = y[j2[i]];
            
             L = Math.sqrt(Math.pow((x2-x1), 2)+Math.pow((y2-y1), 2));
             
             cos_theta = (x2-x1)/L;
             sin_theta = (y2-y1)/L;

             step = L / NumberOfElement;
             
             String LeftSupport = JOINT_SUPPORTS.get(j1[i]).getSupportType();
             String RightSupport = JOINT_SUPPORTS.get(j2[i]).getSupportType();
             
             double E = FRAM_MEMBER.get(i).getE();
             double I = FRAM_MEMBER.get(i).getI();
             double A = FRAM_MEMBER.get(i).getA();

             
             int NumberOfAxialLoadOnThisMember = AXIAL_LOADS.get(i).getSize();
             int NumberOfUniformLoadOnThisMember = UNIFORM_LOADS.get(i).getSize();
             int NumberOfMomentLoadOnThisMember = MOMENT_LOADS.get(i).getSize();
             
             //Loads at joints...
             double X_Load_leftJoint = JOINT_LOADS.get(j1[i]).get_Xload();
             double Y_Load_leftJoint = JOINT_LOADS.get(j1[i]).get_Yload();
             double M_Load_leftJoint = JOINT_LOADS.get(j1[i]).get_Mload();
             
             double X_Load_RightJoint = JOINT_LOADS.get(j2[i]).get_Xload();
             double Y_Load_RightJoint = JOINT_LOADS.get(j2[i]).get_Yload();
             double M_Load_RightJoint = JOINT_LOADS.get(j2[i]).get_Mload();

             //----1------Make joints (x,y)
             
             double x = x1;
             double y = y1;
             for(int j=0 ; j<= NumberOfElement;j++){
                 boolean similar = false;
                 if((x_finite.size() != 0) && (y_finite.size() !=0)){
                     for(int k=0 ; k<=x_finite.size()-1 ; k++){
                         if((x_finite.get(k) == x) && (y_finite.get(k) == y)){
                            //System.out.println("similir");
                            similar = true;
                         }   
                     }
                     
                     if(similar==false){
                         x_finite.add(Format(x,"0.000"));
                         y_finite.add(Format(y,"0.000"));
                     }
               
                 }else{
                     x_finite.add(Format(x,"0.000"));
                     y_finite.add(Format(y,"0.000"));
                 }
                 
                 
                 x += step*cos_theta;
                 y += step*sin_theta;
             }
              System.out.println("HERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR");
             for(int kk=0 ; kk<=x_finite.size()-1;kk++){
                 System.out.println(x_finite.get(kk)+" , "+y_finite.get(kk));
             }
             //----2-------Make members (j1,j2)
             for(int j=count ; j<=(count+NumberOfElement-1); j++){
               j1_finite.add(j);
               j2_finite.add(j+1);
               
               fram_member.add(new FramMember(j,j+1,x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1),E,I,A));
               axial_loads.add(new AxialLoad(x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1)));
               uniform_loads.add(new UniformLoad(x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1)));
               moment_load.add(new MomentLoad(x_finite.get(j),y_finite.get(j),x_finite.get(j+1),y_finite.get(j+1)));              
             }
              //----2-------Make Joints load (X,Y,M)
             for(int j=count ; j<=(count+NumberOfElement); j++){
                 joint_loads.add(new JointLoad(j,0,0,0));
                 
                 if(j == count){
                  joint_loads.get(j).editForce(1, X_Load_leftJoint);
                  joint_loads.get(j).editForce(2, Y_Load_leftJoint);
                  joint_loads.get(j).editForce(3, M_Load_leftJoint);
                 }else if(j == count+NumberOfElement){
                  joint_loads.get(j).editForce(1, X_Load_RightJoint);
                  joint_loads.get(j).editForce(2, Y_Load_RightJoint);
                  joint_loads.get(j).editForce(3, M_Load_RightJoint);  
                 }
                 
             }
             //----22-------Make Loads
             for(int j=count ; j<=(count+NumberOfElement-1); j++){
               
               int MemberIndex = j;
               //Fill the axial_loads
               for(int k = 0 ; k<=NumberOfAxialLoadOnThisMember-1 ; k++){
                   double load_coordinate = AXIAL_LOADS.get(i).getLocation(k);
                   double load_value = AXIAL_LOADS.get(i).getLoads(k);
                   
                   double XcoordinateOfFirstJoint = x1;
                   double XcoordinateOfleftoffinitemember  = x_finite.get(j);
                   double XcoordinateOfRightoffinitemember = x_finite.get(j+1);
                   
                   double YcoordinateOfFirstJoint = y1;
                   double YcoordinateOfleftoffinitemember  = y_finite.get(j);
                   double YcoordinateOfRightoffinitemember = y_finite.get(j+1);
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j) - x1), 2)+Math.pow((y_finite.get(j) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j+1) - x1), 2)+Math.pow((y_finite.get(j+1) - y1), 2));

                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       axial_loads.get(j).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+j+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       axial_loads.get(j).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+j+" @ "+(load_coordinate-LeftJointDistance));
                   } 
                   
               }
               //Fill the Moment load...
               for(int k = 0 ; k<=NumberOfMomentLoadOnThisMember-1 ; k++){
                   double load_coordinate = MOMENT_LOADS.get(i).getLocation(k);
                   double load_value = MOMENT_LOADS.get(i).getMoments(k);
                   
                   double XcoordinateOfFirstJoint = x1;
                   double XcoordinateOfleftoffinitemember  = x_finite.get(j);
                   double XcoordinateOfRightoffinitemember = x_finite.get(j+1);
                   
                   double YcoordinateOfFirstJoint = y1;
                   double YcoordinateOfleftoffinitemember  = y_finite.get(j);
                   double YcoordinateOfRightoffinitemember = y_finite.get(j+1);
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j) - x1), 2)+Math.pow((y_finite.get(j) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j+1) - x1), 2)+Math.pow((y_finite.get(j+1) - y1), 2));

                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       moment_load.get(j).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       moment_load.get(j).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                   } 
               }
                //Fill the uniformloads
               for(int k = 0 ; k<=NumberOfUniformLoadOnThisMember-1 ; k++){
                   double uniformLoadValue = UNIFORM_LOADS.get(i).getUniformLoadValue(k);
                   double a = UNIFORM_LOADS.get(i).getStartLocation(k); //start location of the unifrom load
                   double b = a + UNIFORM_LOADS.get(i).getUniformLoadLength(k);//location of the ends of the uniform load
                   
                   double XcoordinateOfFirstJoint = x1;
                   double XcoordinateOfleftoffinitemember  = x_finite.get(j);
                   double XcoordinateOfRightoffinitemember = x_finite.get(j+1);
                   
                   double YcoordinateOfFirstJoint = y1;
                   double YcoordinateOfleftoffinitemember  = y_finite.get(j);
                   double YcoordinateOfRightoffinitemember = y_finite.get(j+1);
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j) - x1), 2)+Math.pow((y_finite.get(j) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j+1) - x1), 2)+Math.pow((y_finite.get(j+1) - y1), 2));

                   //System.out.println("Here  "+LeftJointDistance+" "+RightJointDistance+",,"+a+","+b+"membr "+j+"length="+uniform_loads.get(j).getMemberLength());
                   //Test if the uniform_load within the member and if(true) Add it....
                   //left point out and riht point is in
                   if(((LeftJointDistance<=a && LeftJointDistance<=b) || (LeftJointDistance>=a && LeftJointDistance>=b)) && (RightJointDistance>=a && RightJointDistance<=b)){
                       uniform_loads.get(j).AddUniformLoad(uniformLoadValue, a - LeftJointDistance, RightJointDistance - a,false);
                   }
                   /*Both In*/
                   else if((LeftJointDistance>=a && LeftJointDistance<=b) && (RightJointDistance>=a && RightJointDistance<=b) ){
                       System.out.println("both");
                       uniform_loads.get(j).AddUniformLoad(uniformLoadValue, 0, RightJointDistance - LeftJointDistance,false);
                   }
                   /*Left in and riht is out*/
                   else if(((RightJointDistance<=a && RightJointDistance<=b) || (RightJointDistance>=a && RightJointDistance>=b)) && (LeftJointDistance>=a && LeftJointDistance<=b)){
                       uniform_loads.get(j).AddUniformLoad(uniformLoadValue, 0, b - LeftJointDistance,false);
                   }
                   /*Both are out*/
                   else{
                        
                   }
               }
             }
             
             //----3-----Make Supports
             for (int j=count ; j<=(count+NumberOfElement) ; j++){
                 if(j == count)
                 {
                   joints_supports.get(j).set_Support(LeftSupport);
                 }else if(j==count+NumberOfElement){
                   joints_supports.get(j).set_Support(RightSupport);
                 }else{
                   joints_supports.get(j).set_Support("ixyz");
                 }
             }
             
             //---4----Make the loads
             count = count + NumberOfElement;
        }
       
    }
    public static void FEM3(int NumberOfElement) throws IOException{
        x_finite.clear();
        y_finite.clear();
        j1_finite.clear();
        j2_finite.clear();
        joints_supports.clear();
        joint_loads.clear();
        fram_member.clear();
        axial_loads.clear();
        uniform_loads.clear();
        moment_load.clear();
        
        // Retrieve All data and calculate the size of K
        ArrayList<String[]> jointsData = new ArrayList<>();
        ArrayList<String[]> membersData = new ArrayList<>();
        
        jointsData = Text_Reader("joints.txt");
        membersData = Text_Reader("members.txt");
        
        int numberOfJoint = JointNumbers;
        int numberOfMember = MemberNumbers;
        int numberOfMemebr_after_FEM = numberOfMember*NumberOfElement;
        int[] jointNumber_New = new int[100000];
        double x1,y1,x2,y2,x_new,y_new;
        double step, L;
        double cos_theta, sin_theta;
        ArrayList<Integer> jointInsideTheMember = new ArrayList<>();
        
        
        
        int count=0; // to fill the j1 and j2 help in dividing
        
        for(int member=0 ; member<=MemberNumbers-1 ; member++){
            
            
            jointInsideTheMember.clear();
            
            int firstJoint = j1[member];
            int secondJoint = j2[member];
               
            
            x1 = x[j1[member]];
            y1 = y[j1[member]];
            x2 = x[j2[member]];
            y2 = y[j2[member]];
            
            
            //-----0-------Prperties./................................................................................................
            L = Math.sqrt(Math.pow((x2-x1), 2)+Math.pow((y2-y1), 2)); 
            cos_theta = (x2-x1)/L;
            sin_theta = (y2-y1)/L;
            step = L / NumberOfElement;
            
            String LeftSupport = JOINT_SUPPORTS.get(j1[member]).getSupportType();
            String RightSupport = JOINT_SUPPORTS.get(j2[member]).getSupportType();
             
            double E = FRAM_MEMBER.get(member).getE();
            double I = FRAM_MEMBER.get(member).getI();
            double A = FRAM_MEMBER.get(member).getA();
  
            int NumberOfAxialLoadOnThisMember = AXIAL_LOADS.get(member).getSize();
            int NumberOfUniformLoadOnThisMember = UNIFORM_LOADS.get(member).getSize();
            int NumberOfMomentLoadOnThisMember = MOMENT_LOADS.get(member).getSize();
             
            //Joints Load
            double X_Load_leftJoint = JOINT_LOADS.get(j1[member]).get_Xload();
            double Y_Load_leftJoint = JOINT_LOADS.get(j1[member]).get_Yload();
            double M_Load_leftJoint = JOINT_LOADS.get(j1[member]).get_Mload();
             
            double X_Load_RightJoint = JOINT_LOADS.get(j2[member]).get_Xload();
            double Y_Load_RightJoint = JOINT_LOADS.get(j2[member]).get_Yload();
            double M_Load_RightJoint = JOINT_LOADS.get(j2[member]).get_Mload();
    
            //--1-----Make the Joints x,y....................................................................................................
            //First Joint
            boolean similar = false;
            if((!x_finite.isEmpty()) && (!y_finite.isEmpty())){
                 for(int k=0 ; k<=x_finite.size()-1 ; k++){
                      if((x_finite.get(k) == x1) && (y_finite.get(k) == y1)){
                          //System.out.println("similir");
                          similar = true;
                        }   
                    }
           if(similar==false){
                        x_finite.add(Format(x1,"0.000"));
                        y_finite.add(Format(y1,"0.000"));
                        joints_supports.add(new JointSupport(LeftSupport));
                        joint_loads.add(new JointLoad(x_finite.size()-1,0,0,0));
                        joint_loads.get(x_finite.size()-1).editForce(1, X_Load_leftJoint);
                        joint_loads.get(x_finite.size()-1).editForce(2, Y_Load_leftJoint);
                        joint_loads.get(x_finite.size()-1).editForce(3, M_Load_leftJoint);
                        
                        jointNumber_New[j1[member]] = x_finite.size()-1;
            }
            }else{
                     x_finite.add(Format(x1,"0.000"));
                     y_finite.add(Format(y1,"0.000"));
                     joint_loads.add(new JointLoad(x_finite.size()-1,0,0,0));
                     joints_supports.add(new JointSupport(LeftSupport));
                     joint_loads.get(x_finite.size()-1).editForce(1, X_Load_leftJoint);
                     joint_loads.get(x_finite.size()-1).editForce(2, Y_Load_leftJoint);
                     joint_loads.get(x_finite.size()-1).editForce(3, M_Load_leftJoint);
                     jointNumber_New[j1[member]] = x_finite.size()-1;
            }
            //In Between Joint
            x_new =x1+ step*cos_theta;
            y_new =y1+ step*sin_theta;
            for(int j=1 ; j<= NumberOfElement-1;j++){
                 similar = false;
                 if((!x_finite.isEmpty()) && (!y_finite.isEmpty())){
                     for(int k=0 ; k<=x_finite.size()-1 ; k++){
                         if((x_finite.get(k) == x_new) && (y_finite.get(k) == y_new)){
                            //System.out.println("similir");
                            similar = true;
                         }   
                     }
                     if(similar==false){
                         x_finite.add(Format(x_new,"0.000"));
                         y_finite.add(Format(y_new,"0.000"));
                         joints_supports.add(new JointSupport("ixyz"));
                         joint_loads.add(new JointLoad(x_finite.size()-1,0,0,0));                     
                         jointInsideTheMember.add(x_finite.size()-1);
                         
                     }
                 }else{
                     //x_finite.add(Format(x_new,"0.000"));
                     //y_finite.add(Format(y_new,"0.000"));
                 }
                 x_new += step*cos_theta;
                 y_new += step*sin_theta;
            }
            //Last Joint
            similar = false;
            if((!x_finite.isEmpty()) && (!y_finite.isEmpty())){
                 for(int k=0 ; k<=x_finite.size()-1 ; k++){
                      if((x_finite.get(k) == x2) && (y_finite.get(k) == y2)){
                          //System.out.println("similir");
                          similar = true;
                        }   
                    }
           if(similar==false){
                        x_finite.add(Format(x2,"0.000"));
                        y_finite.add(Format(y2,"0.000"));
                        joint_loads.add(new JointLoad(x_finite.size()-1,0,0,0));
                        joints_supports.add(new JointSupport(RightSupport));
                        joint_loads.get(x_finite.size()-1).editForce(1, X_Load_RightJoint);
                        joint_loads.get(x_finite.size()-1).editForce(2, Y_Load_RightJoint);
                        joint_loads.get(x_finite.size()-1).editForce(3, M_Load_RightJoint);   
                        jointNumber_New[j2[member]] = x_finite.size()-1;
            }
            }else{
                     x_finite.add(Format(x2,"0.000"));
                     y_finite.add(Format(y2,"0.000"));
                     joint_loads.add(new JointLoad(x_finite.size()-1,0,0,0));
                     joints_supports.add(new JointSupport(RightSupport));
                     joint_loads.get(x_finite.size()-1).editForce(1, X_Load_RightJoint);
                     joint_loads.get(x_finite.size()-1).editForce(2, Y_Load_RightJoint);
                     joint_loads.get(x_finite.size()-1).editForce(3, M_Load_RightJoint);   
                     jointNumber_New[j2[member]] = x_finite.size()-1;
            }
            
            //---2-----Make The Members j1,j2................................................................................................
            //--First Member--
            if(!jointInsideTheMember.isEmpty()){
                j1_finite.add(jointNumber_New[firstJoint]);
                j2_finite.add(jointInsideTheMember.get(0));
                int j1 = jointNumber_New[firstJoint];
                int j2 = jointInsideTheMember.get(0);
                
                fram_member.add(new FramMember(j1,j2,x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2),E,I,A));
                axial_loads.add(new AxialLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                uniform_loads.add(new UniformLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                moment_load.add(new MomentLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                
                //Fill the axial_loads
               for(int k = 0 ; k<=NumberOfAxialLoadOnThisMember-1 ; k++){
                   double load_coordinate = AXIAL_LOADS.get(member).getLocation(k);
                   double load_value = AXIAL_LOADS.get(member).getLoads(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }        
               }
               //Fill the Moment load...
               for(int k = 0 ; k<=NumberOfMomentLoadOnThisMember-1 ; k++){
                   double load_coordinate = MOMENT_LOADS.get(member).getLocation(k);
                   double load_value = MOMENT_LOADS.get(member).getMoments(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   } 
               }
                     //Fill the uniformloads
               for(int k = 0 ; k<=NumberOfUniformLoadOnThisMember-1 ; k++){
                   double uniformLoadValue = UNIFORM_LOADS.get(member).getUniformLoadValue(k);
                   double a = UNIFORM_LOADS.get(member).getStartLocation(k); //start location of the unifrom load
                   double b = a + UNIFORM_LOADS.get(member).getUniformLoadLength(k);//location of the ends of the uniform load
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   
                   if(((LeftJointDistance<=a && LeftJointDistance<=b) || (LeftJointDistance>=a && LeftJointDistance>=b)) && (RightJointDistance>=a && RightJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, a - LeftJointDistance, RightJointDistance - a,false);
                   }
                   /*Both In*/
                   else if((LeftJointDistance>=a && LeftJointDistance<=b) && (RightJointDistance>=a && RightJointDistance<=b) ){
                       System.out.println("both");
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, RightJointDistance - LeftJointDistance,false);
                   }
                   /*Left in and riht is out*/
                   else if(((RightJointDistance<=a && RightJointDistance<=b) || (RightJointDistance>=a && RightJointDistance>=b)) && (LeftJointDistance>=a && LeftJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, b - LeftJointDistance,false);
                   }
                   /*Both are out*/
                   else{
                        
                   }
               }
               
               
            }
            //--In Between.....
            for(int i=0 ; i<=jointInsideTheMember.size()-2;i++ ){
               j1_finite.add(jointInsideTheMember.get(i));
               j2_finite.add(jointInsideTheMember.get(i+1));
               
                int j1 = jointInsideTheMember.get(i);
                int j2 = jointInsideTheMember.get(i+1);
                
                fram_member.add(new FramMember(j1,j2,x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2),E,I,A));
                axial_loads.add(new AxialLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                uniform_loads.add(new UniformLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                moment_load.add(new MomentLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2))); 
                
                    //Fill the axial_loads
               for(int k = 0 ; k<=NumberOfAxialLoadOnThisMember-1 ; k++){
                   double load_coordinate = AXIAL_LOADS.get(member).getLocation(k);
                   double load_value = AXIAL_LOADS.get(member).getLoads(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }        
               }
               //Fill the Moment load...
               for(int k = 0 ; k<=NumberOfMomentLoadOnThisMember-1 ; k++){
                   double load_coordinate = MOMENT_LOADS.get(member).getLocation(k);
                   double load_value = MOMENT_LOADS.get(member).getMoments(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   } 
               }
               //Fill the uniformloads
               for(int k = 0 ; k<=NumberOfUniformLoadOnThisMember-1 ; k++){
                   double uniformLoadValue = UNIFORM_LOADS.get(member).getUniformLoadValue(k);
                   double a = UNIFORM_LOADS.get(member).getStartLocation(k); //start location of the unifrom load
                   double b = a + UNIFORM_LOADS.get(member).getUniformLoadLength(k);//location of the ends of the uniform load
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   
                   if(((LeftJointDistance<=a && LeftJointDistance<=b) || (LeftJointDistance>=a && LeftJointDistance>=b)) && (RightJointDistance>=a && RightJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, a - LeftJointDistance, RightJointDistance - a,false);
                   }
                   /*Both In*/
                   else if((LeftJointDistance>=a && LeftJointDistance<=b) && (RightJointDistance>=a && RightJointDistance<=b) ){
                       System.out.println("both");
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, RightJointDistance - LeftJointDistance,false);
                   }
                   /*Left in and riht is out*/
                   else if(((RightJointDistance<=a && RightJointDistance<=b) || (RightJointDistance>=a && RightJointDistance>=b)) && (LeftJointDistance>=a && LeftJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, b - LeftJointDistance,false);
                   }
                   /*Both are out*/
                   else{
                        
                   }
               }
               
            }
             //--Last Member--
            if(!jointInsideTheMember.isEmpty()){
                j1_finite.add(jointInsideTheMember.get(jointInsideTheMember.size()-1));
                j2_finite.add(jointNumber_New[secondJoint]);
            
                int j1 = jointInsideTheMember.get(jointInsideTheMember.size()-1);
                int j2 = jointNumber_New[secondJoint];
                
                fram_member.add(new FramMember(j1,j2,x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2),E,I,A));
                axial_loads.add(new AxialLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                uniform_loads.add(new UniformLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                moment_load.add(new MomentLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                
                //Fill the axial_loads
                for(int k = 0 ; k<=NumberOfAxialLoadOnThisMember-1 ; k++){
                   double load_coordinate = AXIAL_LOADS.get(member).getLocation(k);
                   double load_value = AXIAL_LOADS.get(member).getLoads(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                }else if((load_coordinate == (LeftJointDistance))){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                    }        
                }
                //Fill the Moment load...
               for(int k = 0 ; k<=NumberOfMomentLoadOnThisMember-1 ; k++){
                   double load_coordinate = MOMENT_LOADS.get(member).getLocation(k);
                   double load_value = MOMENT_LOADS.get(member).getMoments(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   } 
               }
                          //Fill the uniformloads
               for(int k = 0 ; k<=NumberOfUniformLoadOnThisMember-1 ; k++){
                   double uniformLoadValue = UNIFORM_LOADS.get(member).getUniformLoadValue(k);
                   double a = UNIFORM_LOADS.get(member).getStartLocation(k); //start location of the unifrom load
                   double b = a + UNIFORM_LOADS.get(member).getUniformLoadLength(k);//location of the ends of the uniform load
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   
                   if(((LeftJointDistance<=a && LeftJointDistance<=b) || (LeftJointDistance>=a && LeftJointDistance>=b)) && (RightJointDistance>=a && RightJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, a - LeftJointDistance, RightJointDistance - a,false);
                   }
                   /*Both In*/
                   else if((LeftJointDistance>=a && LeftJointDistance<=b) && (RightJointDistance>=a && RightJointDistance<=b) ){
                       System.out.println("both");
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, RightJointDistance - LeftJointDistance,false);
                   }
                   /*Left in and riht is out*/
                   else if(((RightJointDistance<=a && RightJointDistance<=b) || (RightJointDistance>=a && RightJointDistance>=b)) && (LeftJointDistance>=a && LeftJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, b - LeftJointDistance,false);
                   }
                   /*Both are out*/
                   else{
                        
                   }
               } 
            }
              //--if inside empty
            if(jointInsideTheMember.isEmpty()){
                j1_finite.add(firstJoint);
                j2_finite.add(secondJoint);
            
                int j1 = firstJoint;
                int j2 = secondJoint;
                
                fram_member.add(new FramMember(j1,j2,x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2),E,I,A));
                axial_loads.add(new AxialLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                uniform_loads.add(new UniformLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                moment_load.add(new MomentLoad(x_finite.get(j1),y_finite.get(j1),x_finite.get(j2),y_finite.get(j2)));
                
                //Fill the axial_loads
                for(int k = 0 ; k<=NumberOfAxialLoadOnThisMember-1 ; k++){
                   double load_coordinate = AXIAL_LOADS.get(member).getLocation(k);
                   double load_value = AXIAL_LOADS.get(member).getLoads(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                }else if((load_coordinate == (LeftJointDistance))){
                       axial_loads.get((fram_member.size()-1)).AddLoad(load_value, (load_coordinate-LeftJointDistance));
                       //System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                    }        
                }
                //Fill the Moment load...
               for(int k = 0 ; k<=NumberOfMomentLoadOnThisMember-1 ; k++){
                   double load_coordinate = MOMENT_LOADS.get(member).getLocation(k);
                   double load_value = MOMENT_LOADS.get(member).getMoments(k);
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   //Test if the load within the member and if(true) Add it....
                   if((load_coordinate > (LeftJointDistance)) && (load_coordinate < (RightJointDistance)) ){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   }else if((load_coordinate == (LeftJointDistance))){
                       moment_load.get((fram_member.size()-1)).AddMoment(load_value, (load_coordinate-LeftJointDistance));
                       System.out.println("value= "+load_value+" member: "+(fram_member.size()-1)+" @ "+(load_coordinate-LeftJointDistance));
                   } 
               }
                          //Fill the uniformloads
               for(int k = 0 ; k<=NumberOfUniformLoadOnThisMember-1 ; k++){
                   double uniformLoadValue = UNIFORM_LOADS.get(member).getUniformLoadValue(k);
                   double a = UNIFORM_LOADS.get(member).getStartLocation(k); //start location of the unifrom load
                   double b = a + UNIFORM_LOADS.get(member).getUniformLoadLength(k);//location of the ends of the uniform load
                   
                   double LeftJointDistance = Math.sqrt(Math.pow((x_finite.get(j1) - x1), 2)+Math.pow((y_finite.get(j1) - y1), 2));
                   double RightJointDistance = Math.sqrt(Math.pow((x_finite.get(j2) - x1), 2)+Math.pow((y_finite.get(j2) - y1), 2));
                   
                   if(((LeftJointDistance<=a && LeftJointDistance<=b) || (LeftJointDistance>=a && LeftJointDistance>=b)) && (RightJointDistance>=a && RightJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, a - LeftJointDistance, RightJointDistance - a,false);
                   }
                   /*Both In*/
                   else if((LeftJointDistance>=a && LeftJointDistance<=b) && (RightJointDistance>=a && RightJointDistance<=b) ){
                       System.out.println("both");
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, RightJointDistance - LeftJointDistance,false);
                   }
                   /*Left in and riht is out*/
                   else if(((RightJointDistance<=a && RightJointDistance<=b) || (RightJointDistance>=a && RightJointDistance>=b)) && (LeftJointDistance>=a && LeftJointDistance<=b)){
                       uniform_loads.get((fram_member.size()-1)).AddUniformLoad(uniformLoadValue, 0, b - LeftJointDistance,false);
                   }
                   /*Both are out*/
                   else{
                        
                   }
               } 
            }
            
        }
        
        
        
       
       for(int kk=0 ; kk<=x_finite.size()-1;kk++){
                System.out.println(x_finite.get(kk)+","+y_finite.get(kk));
       }
       for(int kkk=0 ; kkk<=j1_finite.size()-1;kkk++){
                 System.out.println(j1_finite.get(kkk)+","+j2_finite.get(kkk));
       }
       
       
    } 
    public static ArrayList<Integer> BoundryConition_FINITE() throws IOException{
        int numberOfJoint = x_finite.size();
        int numberOfMember = j1_finite.size();
        
       ArrayList<Integer> boundryConition = new ArrayList<>();
        
       for (int i =0 ; i<= joints_supports.size()-1 ; i++){
           if(joints_supports.get(i).get_d1() == 0 ){
               boundryConition.add(3*(i+1)-3);
           }
           if(joints_supports.get(i).get_d2() == 0){
               boundryConition.add(3*(i+1)-2);
           }
           if(joints_supports.get(i).get_d3() == 0){
               boundryConition.add(3*(i+1)-1);
           }
       }
        
        return boundryConition;
    }
    public static void AnalysisANDprint_FINITE(int NumberOfElement) throws IOException{
        clearMatrix(FramDeflectionMatrix_FEM);
        FEM3(NumberOfElement);
        //--4--Boubdry Condition
        ArrayList<Integer> BC = new ArrayList<>();
        BC = BoundryConition_FINITE();
        
        
        //Print Matrices and after that we can do the calculations
        //PrintMatrix(Q_FINITE(),"0.00");
        //PrintMatrix(K_FINITE(),"0.00");
        //PrintMatrix(QF_FINITE(),"0.00"); 
        //PrintMatrix(D_FINITE(),"0.00"); 

        //Print Matrix After eliminate and applied the boundry condition
        //PrintMatrix(reduceMatrix(Q_FINITE(),BC,"raw"),"0.00");  
        //PrintMatrix(reduceMatrix(K_FINITE(),BC,"both"),"0.00"); 
        //PrintMatrix(reduceMatrix(D_FINITE(),BC,"raw"),"0.00");
        //PrintMatrix(reduceMatrix(QF_FINITE(),BC,"raw"),"0.00"); 


        //---------Anylysis and solve--------------------
        double[][] Q_FINITE  = reduceMatrix(Q_FINITE(),BC,"raw");
        double[][] K_FINITE  = reduceMatrix(K_FINITE(),BC,"both");
        double[][] D_FINITE  = reduceMatrix(D_FINITE(),BC,"raw");
        double[][] QF_FINITE = reduceMatrix(QF_FINITE(),BC,"raw");
       
       // [Q] = [K][D]+[QF]
       // [K]^-1*[Q]-[QF] = [D]
       //--1--Solve For Defliction
       double[][] defliction =MultiplayMatrix(MatrixInverse(K_FINITE),Matrix1MinusMatrix2(Q_FINITE,QF_FINITE)) ;
       //PrintMatrix(defliction,"0.000000000"); 
      
        
       //--2--Combine the deflictions and get a full matrix of defliction wihout unkowns
        
       double[][] D_Solved_FINITE = D_Solved_FINITE(defliction); //Get the full Matrix of defliction without unkowns
       //
       
       FramDeflectionMatrix_FEM = D_Solved_FINITE;
       //PrintMatrix(D_Solved_FINITE,"0.000000000"); 

       //--3-- find the reaction of beams
       double[][] Beam_0_defliction_FINITE = d_FINITE(D_Solved_FINITE,0);//Get the defliction Matrix of beam (0) first beam
       //PrintMatrix(Beam_0_defliction_FINITE,"0.000000000"); 
       
       double[][] Beam_0_qf_FINITE = qf_FINITE(0);//Get the qf Matrix of beam (0) first beam
       //PrintMatrix(Beam_0_qf_FINITE,"0.000000000"); 
 
       double[][] Beam_0_localK_FINITE = k_local_FINITE(0);//Get the qf Matrix of beam (0) first beam
       //PrintMatrix(Beam_0_localK_FINITE,"0.00"); 
       
       double[][] Beam_0_Reactions_FINITE = Matrix1PlusMatrix2(MultiplayMatrix(Beam_0_localK_FINITE,Beam_0_defliction_FINITE),Beam_0_qf_FINITE);//Get the qf Matrix of beam (0) first beam
       //PrintMatrix(Beam_0_Reactions_FINITE,"0.00"); 
               
    } 
    public static void FEMAnalysisANDprint() throws IOException{
            //--4--Boubdry Condition
        ArrayList<Integer> BC = new ArrayList<>();
        BC = BoundryConition();
        
        
        //Print Matrices and after that we can do the calculations
        PrintMatrix(Q(),"0.00");
        PrintMatrix(K(),"0.00");
        PrintMatrix(QF(),"0.00"); 
        PrintMatrix(D(),"0.00"); 

        //Print Matrix After eliminate and applied the boundry condition
        PrintMatrix(reduceMatrix(Q(),BC,"raw"),"0.00");  
        PrintMatrix(reduceMatrix(K(),BC,"both"),"0.00"); 
        PrintMatrix(reduceMatrix(D(),BC,"raw"),"0.00");
        PrintMatrix(reduceMatrix(QF(),BC,"raw"),"0.00"); 


        //---------Anylysis and solve--------------------
        double[][] Q  = reduceMatrix(Q(),BC,"raw");
        double[][] K  = reduceMatrix(K(),BC,"both");
        double[][] D  = reduceMatrix(D(),BC,"raw");
        double[][] QF = reduceMatrix(QF(),BC,"raw");
       
       // [Q] = [K][D]+[QF]
       // [K]^-1*[Q]-[QF] = [D]
       //--1--Solve For Defliction
       double[][] defliction =MultiplayMatrix(MatrixInverse(K),Matrix1MinusMatrix2(Q,QF)) ;
       PrintMatrix(defliction,"0.000000000"); 
      
        
       //--2--Combine the deflictions and get a full matrix of defliction wihout unkowns
       PrintMatrix(D_Solved(defliction),"0.000000000"); 
       double[][] D_Solved = D_Solved(defliction); //Get the full Matrix of defliction without unkowns
      
       
       //--3-- find the reaction of beams
       double[][] Beam_0_defliction = d(D_Solved,0);//Get the defliction Matrix of beam (0) first beam
       PrintMatrix(Beam_0_defliction,"0.000000000"); 
       
       double[][] Beam_0_qf = qf(0);//Get the qf Matrix of beam (0) first beam
       PrintMatrix(Beam_0_qf,"0.000000000"); 
 
       double[][] Beam_0_localK = k_local(0);//Get the qf Matrix of beam (0) first beam
       PrintMatrix(Beam_0_localK,"0.00"); 
       
       double[][] Beam_0_Reactions = Matrix1PlusMatrix2(MultiplayMatrix(Beam_0_localK,Beam_0_defliction),Beam_0_qf);//Get the qf Matrix of beam (0) first beam
       PrintMatrix(Beam_0_Reactions,"0.00"); 
               
    }  
    public static void PrintFEM() throws IOException{
        for(int i=0 ; i<=x_finite.size()-1; i++){
           System.out.println(x_finite.get(i)+","+y_finite.get(i));
       }
       System.out.println("");
       for(int i=0 ; i<=j1_finite.size()-1; i++){
           System.out.println(j1_finite.get(i)+","+j2_finite.get(i));
       }
       System.out.println("");
       for(int i=0 ; i<=joints_supports.size()-1; i++){
           System.out.println(joints_supports.get(i).getSupportType());
       }     
       System.out.println("");
       for(int i=0 ; i<=fram_member.size()-1; i++){
           System.out.println(fram_member.get(i).getFirstJointNumber()+","+fram_member.get(i).getSecondJointNumber()+" "+fram_member.get(i).getE());
       }   
        System.out.println("");
       for(int i=0 ; i<=axial_loads.size()-1; i++){
           for(int j=0; j<= axial_loads.get(i).getSize()-1 ; j++){
              System.out.println(axial_loads.get(i).getLoads(j)+" @ "+axial_loads.get(i).getLocation(j)+"@ Memebr "+i);
           }
       }  
       System.out.println("");
       for(int i=0 ; i<=uniform_loads.size()-1; i++){
           for(int j=0; j<= uniform_loads.get(i).getSize()-1 ; j++){
              System.out.println(uniform_loads.get(i).getUniformLoadValue(j)+" from "+uniform_loads.get(i).getStartLocation(j)+" LENGTH "+uniform_loads.get(i).getUniformLoadLength(j)+"@ Memebr "+i);
           }
       }
       System.out.println("");
       for(int i=0 ; i<=moment_load.size()-1; i++){
           for(int j=0; j<= moment_load.get(i).getSize()-1 ; j++){
              System.out.println(moment_load.get(i).getMoments(j)+" @ "+moment_load.get(i).getLocation(j)+" at member "+i);
           }
       } 
       System.out.println("");
       for(int i=0 ; i<=joint_loads.size()-1; i++){
          
              System.out.println("x= "+joint_loads.get(i).get_Xload()+" y= "+joint_loads.get(i).get_Yload()+" m= "+joint_loads.get(i).get_Mload());
         
       } 
       
       PrintMatrix(D_FINITE(),"0.00000");
    }
    public static void DeflectedShape(double[][] FramDeflectionMatrixFEM){
       
        double[][] FramDeflectionMatrix_FEM = FramDeflectionMatrixFEM;
        
        ArrayList<Double> x_new = new ArrayList<>();
        ArrayList<Double> y_new = new ArrayList<>();
        
        ArrayList<Double> x_displacement = new ArrayList<>();
        ArrayList<Double> y_displacement = new ArrayList<>();
        
        int index = 0;
        int index1 = 0;
        double scale = 200;
        
        double max_x = 0;
        double max_y = 0;
        
     
        for(int i=0 ; i<=FramDeflectionMatrix_FEM.length-1 ; i++){
            
            if(index == 0){
                if(Math.abs(FramDeflectionMatrix_FEM[i][0]) >= max_x){
                    max_x = Math.abs(FramDeflectionMatrix_FEM[i][0]);
                }
                x_displacement.add(FramDeflectionMatrix_FEM[i][0]);
            }else if(index == 1){
                if(Math.abs(FramDeflectionMatrix_FEM[i][0]) >= max_y){
                    max_y = Math.abs(FramDeflectionMatrix_FEM[i][0]);
                }
                y_displacement.add(FramDeflectionMatrix_FEM[i][0]);
            }else if(index >=2 ){
                index = -1;
            }
            
            index +=1;
        }
        
        //Set the scale value...........
        if(max_x >= max_y){
            if(max_x != 0){
               scale = 1 / max_x;  
            }else{
                scale = 1;
            }
        }else{
             if(max_y != 0){
               scale = 1 / max_y;  
            }else{
                scale = 1;
            }
        }
        
        
        //Make the new x and y where the steps before was the deflections in x&y
        for(int i=0 ; i<= y_displacement.size()-1 ; i++){
            //System.out.println(y_new.get(i));
            y_new.add(y_finite.get(i)+y_displacement.get(i)*scale);
            //y_new.set(i, y_new.get(i)*scale+y_finite.get(i));
        }
        //System.out.println("/////////////////////////////////////////////////////x//////////////////////");
        for(int i=0 ; i<= x_displacement.size()-1 ; i++){
            //System.out.println(x_new.get(i));
            x_new.add(x_finite.get(i)+x_displacement.get(i)*scale);
            //x_new.set(i, x_new.get(i)*scale+x_finite.get(i));
            
        }
        
        //Make the drawings...........
        myDrawing.setPanel(jPanel1);
        for(int i=0 ; i<=fram_member.size()-1; i++){
                   double x1 = x_new.get(fram_member.get(i).getFirstJointNumber());
                   double y1 = y_new.get(fram_member.get(i).getFirstJointNumber());
                   double x2 = x_new.get(fram_member.get(i).getSecondJointNumber());
                   double y2 = y_new.get(fram_member.get(i).getSecondJointNumber());
                   myDrawing.DrawPoints(x1,y1);
                   myDrawing.DrawPoints(x2,y2);
                   myDrawing.DrawLine(x1,y1,x2,y2);
        }
      
        
       
       
    }
    public static void AnimatedShape(double[][] FramDeflectionMatrixFEM){
       
        double[][] FramDeflectionMatrix_FEM = FramDeflectionMatrixFEM;
        
        ArrayList<Double> x_new = new ArrayList<>();
        ArrayList<Double> y_new = new ArrayList<>();
        
        ArrayList<Double> x_displacement = new ArrayList<>();
        ArrayList<Double> y_displacement = new ArrayList<>();
        
        int index = 0;
        int index1 = 0;
        double scale = 200;
        
        double max_x = 0;
        double max_y = 0;
        
     
        for(int i=0 ; i<=FramDeflectionMatrix_FEM.length-1 ; i++){
            
            if(index == 0){
                if(Math.abs(FramDeflectionMatrix_FEM[i][0]) >= max_x){
                    max_x = Math.abs(FramDeflectionMatrix_FEM[i][0]);
                }
                x_displacement.add(FramDeflectionMatrix_FEM[i][0]);
            }else if(index == 1){
                if(Math.abs(FramDeflectionMatrix_FEM[i][0]) >= max_y){
                    max_y = Math.abs(FramDeflectionMatrix_FEM[i][0]);
                }
                y_displacement.add(FramDeflectionMatrix_FEM[i][0]);
            }else if(index >=2 ){
                index = -1;
            }
            
            index +=1;
        }
        
        //Set the scale value...........
        if(max_x >= max_y){
            if(max_x != 0){
               scale = 1 / max_x;  
            }else{
                scale = 1;
            }
        }else{
             if(max_y != 0){
               scale = 1 / max_y;  
            }else{
                scale = 1;
            }
        }
        
        
        //Make the new x and y where the steps before was the deflections in x&y
        for(int i=0 ; i<= y_displacement.size()-1 ; i++){
            //System.out.println(y_new.get(i));
            y_new.add(y_finite.get(i)+y_displacement.get(i)*scale);
            //y_new.set(i, y_new.get(i)*scale+y_finite.get(i));
        }
        //System.out.println("/////////////////////////////////////////////////////x//////////////////////");
        for(int i=0 ; i<= x_displacement.size()-1 ; i++){
            //System.out.println(x_new.get(i));
            x_new.add(x_finite.get(i)+x_displacement.get(i)*scale);
            //x_new.set(i, x_new.get(i)*scale+x_finite.get(i));
            
        }
        
        //Make the drawings...........
        /*
         myDrawing.setPanel(jPanel1);
        for (int i = 0; i <= x_new.size()-1; i++){
              myDrawing.DrawPoints(x_new.get(i), y_new.get(i));
              if(i != x_new.size()-1){
                   myDrawing.DrawLine(x_new.get(i),y_new.get(i),x_new.get(i+1),y_new.get(i+1));
              }
        }
        */
        
        //Make the drawings...........
        myDrawing.setPanel(jPanel1);
        for(double SCALE=0 ; SCALE<=1 ; SCALE +=0.1){
             myDrawing.CleanThePanel(jPanel1);
           for(int i=0 ; i<=fram_member.size()-1; i++){
                double x1 = x_finite.get(fram_member.get(i).getFirstJointNumber())+x_displacement.get(fram_member.get(i).getFirstJointNumber())*scale*SCALE;
                double y1 = y_finite.get(fram_member.get(i).getFirstJointNumber())+y_displacement.get(fram_member.get(i).getFirstJointNumber())*scale*SCALE;
                double x2 = x_finite.get(fram_member.get(i).getSecondJointNumber())+x_displacement.get(fram_member.get(i).getSecondJointNumber())*scale*SCALE;
                double y2 = y_finite.get(fram_member.get(i).getSecondJointNumber())+y_displacement.get(fram_member.get(i).getSecondJointNumber())*scale*SCALE;     
                myDrawing.DrawPoints(x1,y1);
                myDrawing.DrawPoints(x2,y2);
                myDrawing.DrawLine(x1,y1,x2,y2);
            } 
              try{
               TimeUnit.MILLISECONDS.sleep(100);
           }catch(Exception e){
               System.out.println(e.getMessage());
           }
        }
        
        for(double SCALE=1 ; SCALE>=0 ; SCALE -=0.1){
             myDrawing.CleanThePanel(jPanel1);
           for(int i=0 ; i<=fram_member.size()-1; i++){
                double x1 = x_finite.get(fram_member.get(i).getFirstJointNumber())+x_displacement.get(fram_member.get(i).getFirstJointNumber())*scale*SCALE;
                double y1 = y_finite.get(fram_member.get(i).getFirstJointNumber())+y_displacement.get(fram_member.get(i).getFirstJointNumber())*scale*SCALE;
                double x2 = x_finite.get(fram_member.get(i).getSecondJointNumber())+x_displacement.get(fram_member.get(i).getSecondJointNumber())*scale*SCALE;
                double y2 = y_finite.get(fram_member.get(i).getSecondJointNumber())+y_displacement.get(fram_member.get(i).getSecondJointNumber())*scale*SCALE;     
                myDrawing.DrawPoints(x1,y1);
                myDrawing.DrawPoints(x2,y2);
                myDrawing.DrawLine(x1,y1,x2,y2);
            } 
              try{
               TimeUnit.MILLISECONDS.sleep(100);
           }catch(Exception e){
               System.out.println(e.getMessage());
           }
        }
       
        
        
        
        
        /*
        myDrawing.setPanel(jPanel1);
        for(double SCALE=0 ; SCALE<=1 ; SCALE +=0.1){
            myDrawing.CleanThePanel(jPanel1);
            for (int i = 0; i <= x_displacement.size()-1; i++){
             
                double x1 = x_finite.get(i)+x_displacement.get(i)*scale*SCALE;
                double y1 = y_finite.get(i)+y_displacement.get(i)*scale*SCALE;
                
              myDrawing.DrawPoints(x1,y1);
              if(i != x_displacement.size()-1){
                   myDrawing.DrawLine(x_finite.get(i)+x_displacement.get(i)*scale*SCALE,y_finite.get(i)+y_displacement.get(i)*scale*SCALE,x_finite.get(i+1)+x_displacement.get(i+1)*scale*SCALE,y_finite.get(i+1)+y_displacement.get(i+1)*scale*SCALE);
              }
         } 
           try{
               TimeUnit.MILLISECONDS.sleep(100);
           }catch(Exception e){
               System.out.println(e.getMessage());
           }
        }
        
         for(double SCALE=1 ; SCALE>=0 ; SCALE -=0.1){
            myDrawing.CleanThePanel(jPanel1);
            for (int i = 0; i <= x_displacement.size()-1; i++){
             
              myDrawing.DrawPoints(x_finite.get(i)+x_displacement.get(i)*scale*SCALE, y_finite.get(i)+y_displacement.get(i)*scale*SCALE);
              if(i != x_displacement.size()-1){
                   myDrawing.DrawLine(x_finite.get(i)+x_displacement.get(i)*scale*SCALE,y_finite.get(i)+y_displacement.get(i)*scale*SCALE,x_finite.get(i+1)+x_displacement.get(i+1)*scale*SCALE,y_finite.get(i+1)+y_displacement.get(i+1)*scale*SCALE);
              }
         } 
           try{
               TimeUnit.MILLISECONDS.sleep(100);
           }catch(Exception e){
               System.out.println(e.getMessage());
           }
        }
        */ 
        //Draw the orgin frame
          
            cleanThePanel();
            DrawTheMember();
            DrawTheJoints();
            DrawTheSupports();
            DrawAxialLoads();
            DrawUniformLoads();
            DrawMomentLoads();
            DrawJointsLoad();
    
        
       
    }
    public static double[][] get_q_FINITE(double[][] D_FINITE,int member_Index) throws IOException{
       //q = k_local(member_Index)*d(D,member_Index)+qf(member_Index);
       double x1,y1,x2,y2;
       x1 = x_finite.get(j1_finite.get(member_Index));
       y1 = y_finite.get(j1_finite.get(member_Index));
       x2 = x_finite.get(j2_finite.get(member_Index));
       y2 = y_finite.get(j2_finite.get(member_Index));
     
       double[][] q = Matrix1PlusMatrix2(MultiplayMatrix(k_local_FINITE(member_Index),d_FINITE(D_FINITE,member_Index)),qf_FINITE(member_Index));
       double[][] TransFormationMatrix = TransformationMatrix(x1,y1,x2,y2);
       q = MultiplayMatrix(TransFormationMatrix,q);
       //System.out.println("mmmmmmmmmmmmmmm");
       //PrintMatrix(q,"0.0000");
       //System.out.println("mmmmmmmmmmmmmmm");
       return q;
   }
    public static double[][] TransformationMatrix(double x1,double y1,double x2,double y2){
        double L,cosTheta,sinTheta;
        
        double[][] TraM = new double[6][6];
        
        L = Math.sqrt(Math.pow((x2-x1), 2)+Math.pow((y2-y1), 2)); 
        cosTheta = (x2-x1)/L;
        sinTheta = (y2-y1)/L;
        
        TraM[0][0] =  cosTheta ; TraM[0][1]=   sinTheta ; TraM[0][2] = 0 ; TraM[0][3] =    0     ; TraM[0][4] =     0      ; TraM[0][5] = 0 ;
        TraM[1][0] = -sinTheta ; TraM[1][1]=   cosTheta ; TraM[1][2] = 0 ; TraM[1][3] =    0     ; TraM[1][4] =     0      ; TraM[1][5] = 0 ; 
        TraM[2][0] =     0     ; TraM[2][1]=       0    ; TraM[2][2] = 1 ; TraM[2][3] =    0     ; TraM[2][4] =     0      ; TraM[2][5] = 0 ; 
        TraM[3][0] =     0     ; TraM[3][1]=       0    ; TraM[3][2] = 0 ; TraM[3][3] = cosTheta ; TraM[3][4] = sinTheta  ; TraM[3][5] = 0 ;
        TraM[4][0] =     0     ; TraM[4][1]=       0    ; TraM[4][2] = 0 ; TraM[4][3] = -sinTheta ; TraM[4][4] = cosTheta   ; TraM[4][5] = 0 ; 
        TraM[5][0] =     0     ; TraM[5][1]=       0    ; TraM[5][2] = 0 ; TraM[5][3] =   0      ; TraM[5][4] =     0      ; TraM[5][5] = 1 ; 
        
        return TraM;
    }
    public static void getShearMatrix(){
         ArrayList<Double> ShearDiagram = new ArrayList<>();
           try {
            // TODO add your handling code here:
            //if(Integer.valueOf(jTextField_NumberOfElement.getText()) >= 1){
                AnalysisANDprint_FINITE(10);//You can change this number as much you need this mean the number of element finite element
                double[][] q = null;
                System.out.println("Shear Diagram");
                ShearDiagram.add(0.0);
                for(int i = 0 ; i<=fram_member.size()-1; i++){
                    q = get_q_FINITE(FramDeflectionMatrix_FEM,i);
                    ShearDiagram.add(Format(q[1][0],"0.000"));
                    System.out.println(Format(q[1][0],"0.000"));
                }
                ShearDiagram.add(Format(-q[4][0],"0.000"));
                ShearDiagram.add(0.0);
                System.out.println(Format(-q[4][0],"0.000"));
        //}
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void getMomentMatrix(){
         ArrayList<Double> MomentDiagram = new ArrayList<>();
           try {
            // TODO add your handling code here:
            //if(Integer.valueOf(jTextField_NumberOfElement.getText()) >= 1){
                AnalysisANDprint_FINITE(10);//You can change this number as much you need this mean the number of element finite element
                double[][] q = null;
                System.out.println("Moment Diagram");
                MomentDiagram.add(0.0);
                for(int i = 0 ; i<=fram_member.size()-1; i++){
                    q = get_q_FINITE(FramDeflectionMatrix_FEM,i);
                    MomentDiagram.add(Format(-q[2][0],"0.000"));
                    System.out.println(Format(q[2][0],"0.000"));
                }
                MomentDiagram.add(Format(q[5][0],"0.000"));
                MomentDiagram.add(0.0);
                System.out.println(Format(-q[5][0],"0.000"));
        //}
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
   public static ArrayList<AxialLoad> get_AXIAL_LOADS(){
       return AXIAL_LOADS;
   }
   public static ArrayList<MomentLoad> get_MOMENT_LOADS(){
       return MOMENT_LOADS;
   }
   public static ArrayList<UniformLoad> get_UNIFORM_LOADS(){
       return UNIFORM_LOADS;
   }
   public static ArrayList<FramMember> get_FRAM_MEMBER(){
       return FRAM_MEMBER;
   }
   public static double[] get_X(){
       return x;
   }
   public static double[] get_Y(){
       return y;
   }
   
   
   
    
/******************************************************************************************************************
 ******************************************************************************************************************
 ******************************************************************************************************************
 ***********************************Functions and Methods*******************************************************
 ******************************************************************************************************************
 ******************************************************************************************************************
 */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_AddJoints;
    private javax.swing.JButton jButton_AddLoads;
    private javax.swing.JButton jButton_AddLoads_Joints;
    private javax.swing.JButton jButton_AddMembers;
    private javax.swing.JButton jButton_Analysis;
    private javax.swing.JButton jButton_AnimatedSahpe;
    private javax.swing.JButton jButton_Deflections;
    private javax.swing.JButton jButton_EditTheFramProperties;
    private javax.swing.JButton jButton_EditTheSupports;
    private javax.swing.JButton jButton_MomentDiagram;
    private javax.swing.JButton jButton_MoveDown;
    private javax.swing.JButton jButton_MoveLeft;
    private javax.swing.JButton jButton_MoveRight;
    private javax.swing.JButton jButton_MoveUp;
    private javax.swing.JButton jButton_Reactions;
    private javax.swing.JButton jButton_SetTheFramProperties;
    private javax.swing.JButton jButton_SetTheSupports;
    private javax.swing.JButton jButton_ShearDiagram;
    private javax.swing.JButton jButton_deflectedShape;
    private javax.swing.JButton jButton_minimize;
    private javax.swing.JButton jButton_zoom;
    private javax.swing.JCheckBox jCheckBox_Free;
    private javax.swing.JCheckBox jCheckBox_ShowJointNumber;
    private javax.swing.JCheckBox jCheckBox_ShowMemberNumber;
    private javax.swing.JCheckBox jCheckBox_XY;
    private javax.swing.JCheckBox jCheckBox_XYZ;
    private javax.swing.JCheckBox jCheckBox_Y;
    private javax.swing.JComboBox<String> jComboBox_JointIndex;
    private javax.swing.JComboBox<String> jComboBox_JointIndex_Loads;
    private javax.swing.JComboBox<String> jComboBox_MemberIndex;
    private javax.swing.JComboBox<String> jComboBox_MemberIndex_Loads;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField_Area;
    private javax.swing.JTextField jTextField_Jointload_M;
    private javax.swing.JTextField jTextField_Jointload_X;
    private javax.swing.JTextField jTextField_Jointload_Y;
    private javax.swing.JTextField jTextField_M;
    private javax.swing.JTextField jTextField_M_At;
    private javax.swing.JTextField jTextField_ModulasfElasticity;
    private javax.swing.JTextField jTextField_MomentOfInertia;
    private javax.swing.JTextField jTextField_NumberOfElement;
    private javax.swing.JTextField jTextField_P;
    private javax.swing.JTextField jTextField_P_At;
    private javax.swing.JTextField jTextField_W;
    private javax.swing.JTextField jTextField_W_At;
    private javax.swing.JTextField jTextField_W_To;
    // End of variables declaration//GEN-END:variables
}
